# General settings
export EDITOR='vim'
export HISTSIZE=5000
export HISTFILESIZE=5000
export GREP_COLORS='mt=1;36'
export PAGER='less'
export TZ='Europe/Lisbon'
export DESKTOPWINSL='/mnt/c/Users/GonÃ§alo Sousa/'
export HISTCONTROL='ignoredups'
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export PASTEL_COLOR_MODE=24bit

fastfetch

# Ansible
export ANSIBLE_CONFIG="$HOME/.config/ansible/config.ini"
export ANSIBLE_INVENTORY="$HOME/.config/ansible/inventory"

# Starship window title
set_win_title() {
    echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"
}

starship_precmd_user_func="set_win_title"

# Load Homebrew
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# Color Man pages
export LESS="R --use-color"
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'


# Dotfiles
DOTFILES_REPO="git@github.com:gsousa7/dotfiles.git"
DOTFILES_DIR="$HOME/dotfiles"


# Colors
MAGENTA="\e[35m"
YELLOW="\e[33m"
BLUE="\e[34m"
GREEN="\e[32m"
RESET="\e[0m"
ORANGE="\e[38;5;214m"
RED="\e[31m"


# Custom Alias
alias l='\ls -h --color=auto --group-directories-first'
alias ls='\ls -lh --color=auto --group-directories-first'
alias ll='\ls -lah --color=auto --group-directories-first'
alias aqui='explorer.exe .'
alias fmedia='find . -type f \( -name "*.mp4" -o -name "*.mkv" \)'
#alias fmedia='find . -type f \( -name "*.mp4" -o -name "*.mkv" \) -exec mv {} . \;'
alias cdd='cd "${DESKTOPWINSL}Desktop"'
alias data='echo $(date "+%d/%m/%Y %H:%M:%S")'
alias tempolx='curl wttr.in/Lisboa\?format=4'
alias temposx='curl wttr.in/Seixal\?format=4'
alias tempolxf='curl wttr.in/Lisboa'
alias temposxf='curl wttr.in/Seixal'
alias dus='du -sh * 2>/dev/null'
alias net='ip -br -c a'
alias ippub='curl -s https://ipinfo.io/ip && echo'
alias ippubf='curl -s https://ipinfo.io && echo'
alias rb="source $HOME/.bashrc"
alias eb="vim $HOME/.bashrc"
alias ebt="vim $HOME/.bash_tools"
alias evrc="vim $HOME/.vimrc"
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias wdir='cd $HOME/work'
alias gdir='cd $HOME/git'
alias ldir='cd $HOME/lab'
alias ddir='cd $HOME/dotfiles'
alias svim='sudoedit'
alias v='vim'
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'
alias rg="rg --hidden --smart-case --glob='!.git/' --no-search-zip --trim --colors=line:style:bold --colors=path:fg:magenta --colors=match:style:nobold"
alias rga="rg --hidden --no-ignore --binary --force-text --smart-case --trim"
alias etx="vim $HOME/.config/tmux/tmux.config"
alias es="vim $HOME/.config/starship.toml"
alias eai="vim $HOME/.config/ansible/inventory"
alias bat="batcat"
alias bats="batcat -pn --no-paging"


# Git Aliases and functions
alias nb='git checkout -b'
alias gall='git add -A'
alias gst='git status'
alias ga='git add'
alias gf='git fetch'
alias gb='git branch'
alias gc='git commit -m'
alias gcl='git clone'
alias gi='git init'
alias gsts='git status --short'
alias glpd='git log --graph --oneline --decorate --all -p --pretty=format:"%C(brightred)%h%Creset %C(white)<%C(green)%an - %ae%Creset%C(white)>%Creset %C(yellow)(%ad)%Creset %s %C(brightcyan)%d%Creset"'
alias gl='git log --all --graph --date=format:"%d/%m/%Y %H:%M" --pretty=format:"%C(brightred)%h%Creset -%C(brightcyan)%d%Creset %s %C(yellow)(%ad) %C(white)<%C(green)%an - %ae%Creset%C(white)>%Creset"'
alias gls='git log --graph --oneline --decorate --all'
alias glps='git log --graph --oneline --decorate --all --stat --pretty=format:"%C(brightred)%h%Creset %C(white)<%C(green)%an - %ae%Creset%C(white)>%Creset %C(yellow)(%ad)%Creset %s %C(brightcyan)%d%Creset"'
alias gstr='git log --oneline --simplify-by-decoration --graph --all'
alias gp='git push origin'
alias gu='git pull' # gu = git update
alias gs='git switch'
alias gdif="git diff --output-indicator-new=' ' --output-indicator-old=' '"
alias gdiff="git diff --output-indicator-new=' ' --output-indicator-old=' ' --color-words"
alias gloa='git log --author'
alias glof='git log --follow'


# Git oneliner to add commit and push
lazygit() {
    if [ -z "$1" ]; then
        echo "Error: Commit message is required."
        echo "Usage: lazygit '<commit_message>' <branch_name>"
        return 1
    fi

    if [ -z "$2" ]; then
        echo "Error: Branch name is required"
        echo "Usage: lazygit '<commit_message>' <branch_name>"
        return 1
    fi

    git add -A
    git commit -m "$1"
    git push -u origin "$2"
}

# Git status for multiple repositories
gdst() {
    found_repo=false
    for dir in */; do
        echo -e "\n${BLUE}=== Checking ${ORANGE}$dir${RESET}${BLUE} ===${RESET}"

        if [ -d "$dir/.git" ]; then
            found_repo=true
            output=$(cd "$dir" && git status -s)

            if [[ -z "$output" ]]; then
                echo -e "${GREEN}No changes${RESET}"
            else
                echo -e "${YELLOW}$output${RESET}"
            fi
        else
            echo -e "${MAGENTA}Not initialized${RESET}"
        fi
    done

    if ! $found_repo; then
        echo -e "${MAGENTA}No Git repositories found.${RESET}"
    fi
}

gppr() {
    local found_repo=false
    for dir in */; do
        echo -e "\n${BLUE}=== Checking ${ORANGE}$dir${RESET}${BLUE} ===${RESET}"

        if [ -d "$dir/.git" ]; then
            found_repo=true
            ( # Use a subshell to execute commands within the directory without affecting the parent script's current directory
                cd "$dir" || { echo -e "${RED}Error: Could not enter directory '$dir'. Skipping.${RESET}"; return 1; }

                # Check if 'main' branch exists locally
                if ! git show-ref --verify --quiet refs/heads/main; then
                    echo -e "${MAGENTA}No 'main' branch found locally.${RESET}"
                    return 0 # Continue to next directory
                fi

                # Check if 'origin' remote exists and if 'main' branch is tracked
                if ! git remote show origin &>/dev/null; then
                    echo -e "${MAGENTA}No 'origin' remote found.${RESET}"
                    return 0
                fi

                # Fetch the latest state of the 'main' branch from origin to ensure an accurate comparison
                # Redirect stderr to /dev/null to suppress common "branch not found" warnings if origin/main doesn't exist yet
                git fetch origin main &>/dev/null

                # Check if 'origin/main' exists after fetch
                if ! git show-ref --verify --quiet refs/remotes/origin/main; then
                    echo -e "${MAGENTA}'main' branch not found on 'origin'. Possibly needs first push.${RESET}"
                    return 0
                fi

                # Count commits local 'main' is ahead of 'origin/main'
                local ahead_count=$(git rev-list --count origin/main..main)

                # Count commits local 'main' is behind 'origin/main'
                local behind_count=$(git rev-list --count main..origin/main)

                if [ "$ahead_count" -gt 0 ]; then
                    echo -e "${YELLOW}Main branch is ${ahead_count} commit(s) ahead of remote. NOT PUSHED.${RESET}"
                elif [ "$behind_count" -gt 0 ]; then
                    echo -e "${YELLOW}Main branch is ${behind_count} commit(s) behind remote. Consider pulling.${RESET}"
                else
                    echo -e "${GREEN}Main branch is up-to-date with remote.${RESET}"
                fi
            ) # End of subshell
        else
            echo -e "${MAGENTA}Not a Git repository.${RESET}"
        fi
    done

    if ! $found_repo; then
        echo -e "${MAGENTA}No Git repositories found in subdirectories.${RESET}"
    fi
}


# tmux alias
alias t='tmux'
alias ta='tmux attach -t'
alias td='tmux detach'
alias tl='tmux list-sessions'
alias tn='tmux new -s'
alias tks='tmux kill-session -t'
alias ts='tmux switch -t'
alias tkss='tmux kill-server'
alias trew='tmux rename-window'
alias tres='tmux rename-session -t'
alias tw='tmux list-windows'
alias tns='tmux new-session -A -s'
alias tslt='tmux select-layout tiled'


# Kubernetes Alias
alias k='kubectl'
alias ks='kubectl -n kube-system'
alias kdesc='kubectl describe'
alias kl='kubectl logs'
alias ke='kubectl exec -it'
alias kexp='kubectl explain'
alias ked='kubectl edit'
alias ksetns='kubectl config set-context --current --namespace'

## Cluster commands
alias kci='kubectl cluster-info'
alias kgnw='kubectl get nodes -o wide'

## Create resources
alias kcf='kubectl create -f'
alias kaf='kubectl apply -f'

## Get resources
alias kgn='kubectl get nodes'
alias kgp='kubectl get pods'
alias kgpl='kubectl get pods -l'
alias kgpa='kubectl get pods --all-namespaces'
alias kgs='kubectl get services'
alias kgd='kubectl get deployments'
alias kgns='kubectl get namespaces'

## Delete
alias kd='kubectl delete'
alias kdp='kubectl delete pod'
alias kds='kubectl delete service'
alias kdd='kubectl delete deployment'
alias kdn='kubectl delete namespace'

# Custom functions
field() {
    awk -F "${2:- }" "{ print \$${1:-1} }"
}

tempo() {
    curl -s "wttr.in/${1}?format=4"
}

tempof() {
    curl -s "wttr.in/${1}"
}

dsk() {
    if [ -d "/mnt/$1" ]; then
        cd "/mnt/$1" || return
    else
        echo "Drive /mnt/$1 not found."
    fi
}

explain() {
    if [ "$#" -eq 0 ]; then
        while read -p "Command: " cmd; do
            curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
        done
        echo "Bye!"
    elif [ "$#" -eq 1 ]; then
        curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
    else
        echo "Usage"
        echo "explain                  interactive mode."
        echo "explain 'cmd -o | ...'   one quoted command to explain it."
    fi
}

lintsh() {
  shellcheck "$1"
}

fmtsh() {
  shfmt -i 2 -sr -ci -w "$1"
}

epoch() {
    local num=${1:--1}
    printf '%(%B %d, %Y %-I:%M:%S %p %Z)T\n' "$num"
}

rgs() {
  git diff --cached --name-only -z | rg --files0-from=- -- "$@"
}

function ex {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: ex <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
 else
    for n in "$@"
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.cbr|*.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.cbz|*.epub|*.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *.cpio)      cpio -id < ./"$n"  ;;
            *.cba|*.ace)      unace x ./"$n"      ;;
            *)
                         echo "ex: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}


# youtube-dl functions
## Get mp3 file of youtube
getyt() {
    yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube
getytmp4() {
    yt-dlp -f 'bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=1080]+bestaudio/best[height<=1080]/best' \
           --merge-output-format mp4 \
           --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp3 file of youtube playlist
getytplist() {
    yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 \
           --output "${DESKTOPWINSL}Desktop/%(playlist_title)s/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube playlist
getytplistmp4() {
    yt-dlp -f 'bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=1080]+bestaudio/best[height<=1080]/best' \
           --merge-output-format mp4 \
           --output "${DESKTOPWINSL}Desktop/%(playlist_title)s/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube with subs
getytmp4subs() {
    yt-dlp -f 'bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=1080]+bestaudio/best[height<=1080]/best' \
           --merge-output-format mp4 \
           --write-subs --embed-subs --sub-langs "en,pt,es" --sub-format "srt/vtt/best" \
           --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube playlist with subs
getytplistmp4subs() {
    yt-dlp -f 'bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/bestvideo[height<=1080]+bestaudio/best[height<=1080]/best' \
           --merge-output-format mp4 \
           --write-subs --embed-subs --sub-langs "en,pt,es" --sub-format "srt/vtt/best" \
           --output "${DESKTOPWINSL}Desktop/%(playlist_title)s/%(title)s.%(ext)s" "$1"
}

## Debug function - check available formats
getytformats() {
    echo "Available formats for: $1"
    yt-dlp --list-formats "$1"
}

## Flexible download function with options
getytflex() {
    local url="$1"
    local format="$2"
    local quality="$3"

    case "$format" in
        "mp3"|"audio")
            yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 \
                   --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$url"
            ;;
        "mp4"|"video")
            case "$quality" in
                "4k"|"2160")
                    yt-dlp -f 'bestvideo[height<=2160]+bestaudio/best[height<=2160]/best' \
                           --merge-output-format mp4 \
                           --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$url"
                    ;;
                "1440"|"2k")
                    yt-dlp -f 'bestvideo[height<=1440]+bestaudio/best[height<=1440]/best' \
                           --merge-output-format mp4 \
                           --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$url"
                    ;;
                "720")
                    yt-dlp -f 'bestvideo[height<=720]+bestaudio/best[height<=720]/best' \
                           --merge-output-format mp4 \
                           --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$url"
                    ;;
                *)
                    yt-dlp -f 'bestvideo[height<=1080]+bestaudio/best[height<=1080]/best' \
                           --merge-output-format mp4 \
                           --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$url"
                    ;;
            esac
            ;;
        *)
            echo "Usage: getytflex <url> <format> [quality]"
            echo "Format: mp3|audio|mp4|video"
            echo "Quality (for video): 720|1080|1440|4k"
            echo "Example: getytflex 'https://youtu.be/...' mp4 1080"
            ;;
    esac
}

# spotify functions
## Get Spotify track
getspot() {
    spotdl --output "${DESKTOPWINSL}Desktop/{artist} - {title}" --format mp3 --bitrate 320k "$1"
}

## Get Spotify album
getalb() {
    spotdl --output "${DESKTOPWINSL}Desktop/{artist} - {album}/{artist} - {title}" --format mp3 --bitrate 320k "$1"
}

# Get Spotify playlist
getplay() {
    spotdl --output "${DESKTOPWINSL}Desktop/{playlist}/{artist} - {title}" --format mp3 --bitrate 320k "$1"
}

# List starship palettes and set one
pcolor() {
    #if [ "$(readlink ~/.config/starship.toml)" != "$HOME/dotfiles/starship_full.toml" ]; then
    #    echo "Palette can only be changed when the full Starship configuration is active."
    #    return 1
    #fi

    echo "Available palettes:"
    echo "1) gruvbox_dark"
    echo "2) nord"
    echo "3) nord inverted"
    echo "4) dracula"
    echo "5) solarized_dark"
    echo "6) solarized_light"
    echo "7) catppuccin_mocha"
    echo "8) guezwhoz"

    read -p "Enter the number of the palette you want to use: " choice

    local palette=""
    case $choice in
        1) palette="gruvbox_dark" ;;
        2) palette="nord" ;;
        3) palette="nord_inverted" ;;
        4) palette="dracula" ;;
        5) palette="solarized_dark" ;;
        6) palette="solarized_light" ;;
        7) palette="catppuccin_mocha" ;;
        8) palette="guezwhoz" ;;
        *)
            echo "Invalid choice. Exiting."
            return 1
            ;;
    esac

    starship config palette "$palette"
    echo "Starship palette updated to $palette. Restart your terminal to see the changes."
}


pskinf() {
    # Unlink if symlink or remove if file exists
    [ -L ~/.config/starship.toml ] && unlink ~/.config/starship.toml
    [ -f ~/.config/starship.toml ] && rm ~/.config/starship.toml

    # Link to full config
    ln -sf ~/dotfiles/starship_full.toml ~/.config/starship.toml

    echo "Switched to full Starship prompt."
}

pskins() {
    # Unlink if symlink or remove if file exists
    [ -L ~/.config/starship.toml ] && unlink ~/.config/starship.toml
    [ -f ~/.config/starship.toml ] && rm ~/.config/starship.toml

    # Link to simple config
    ln -sf ~/dotfiles/starship_simple.toml ~/.config/starship.toml

    echo "Switched to simple Starship prompt."
}

# get vim help
vimfo() {
    echo ""
    echo -e "${BLUE}Vim Cheatsheet${RESET}\n"

    # Basic Commands
    echo -e "${ORANGE}Basic Commands:${RESET}"
    echo -e "${YELLOW}Not required 'Esc :' but requires \ (exactly has bellow)${RESET}"
    echo -e "${MAGENTA}\q      ${RESET}- Quit"
    echo -e "${MAGENTA}\w      ${RESET}- Save"
    echo -e "${MAGENTA}\x      ${RESET}- Save and quit"
    echo -e "${MAGENTA}\/      ${RESET}- Clear search highlights"
    echo
    
    # Tab Management
    echo -e "${ORANGE}Tab Commands:${RESET}"
    echo -e "${MAGENTA}\t      ${RESET}- New tab"
    echo -e "${MAGENTA}\c      ${RESET}- Close current tab"
    echo -e "${MAGENTA}\n      ${RESET}- Next tab"
    echo -e "${MAGENTA}\p      ${RESET}- Previous tab"
    echo

    # Split Management
    echo -e "${ORANGE}Split Commands:${RESET}"
    echo -e "${YELLOW}Required 'Esc :'${RESET}"
    echo -e "${MAGENTA}:sp     ${RESET}- Create horizontal split (same file)"
    echo -e "${MAGENTA}:new    ${RESET}- Create horizontal split (new file)"
    echo -e "${MAGENTA}:vsp    ${RESET}- Create vertical split (same file)"
    echo -e "${MAGENTA}:vnew   ${RESET}- Create vertical split (new file)"
    echo

    echo -e "${ORANGE}Split Control:${RESET}"
    echo -e "${MAGENTA}Ctrl w c${RESET} - Close current split"
    echo -e "${MAGENTA}Ctrl w o${RESET} - Close all splits except current"
    echo

    # Navigation
    echo -e "${ORANGE}Split Navigation:${RESET}"
    echo -e "${MAGENTA}Ctrl h  ${RESET}- Move to left split"
    echo -e "${MAGENTA}Ctrl j  ${RESET}- Move to down split"
    echo -e "${MAGENTA}Ctrl k  ${RESET}- Move to up split"
    echo -e "${MAGENTA}Ctrl l  ${RESET}- Move to right split"
    echo

    # Resizing
    echo -e "${ORANGE}Split Resizing:${RESET}"
    echo -e "${MAGENTA}Ctrl w +${RESET} - Increase height"
    echo -e "${MAGENTA}Ctrl w -${RESET} - Decrease height"
    echo -e "${MAGENTA}Ctrl w >${RESET} - Increase width"
    echo -e "${MAGENTA}Ctrl w <${RESET} - Decrease width"
    echo -e "${MAGENTA}Ctrl w =${RESET} - Equalize split sizes"
    echo

    # Launch Commands
    echo -e "${ORANGE}Launch with Splits:${RESET}"
    echo -e "${MAGENTA}vim -O file1.txt file2.txt${RESET} - Open with vertical split"
    echo -e "${MAGENTA}vim -o file1.txt file2.txt${RESET} - Open with horizontal split"
    echo

    # ALE
    echo -e "${ORANGE}ALE Commands:${RESET}"
    echo -e "${MAGENTA}:ALEInfo         ${RESET}- Shows debug information for ALE."
    echo -e "${MAGENTA}:ALEDetail       ${RESET}- Displays detailed errors and warnings."
    echo -e "${MAGENTA}:ALEGoToNext     ${RESET}- Jumps to the next error or warning."
    echo -e "${MAGENTA}:ALEGoToPrevious ${RESET}- Jumps to the previous error or warning."
    echo -e "${MAGENTA}:ALEToggle       ${RESET}- Toggles ALE on or off for the current buffer."
    echo -e "${MAGENTA}:ALEFix          ${RESET}- Automatically fixes code issues on save."
}

# Tmux help
tmuxfo() {
    echo ""
    echo -e "${BLUE}Tmux Cheatsheet${RESET}\n"
    echo -e "${MAGENTA}Ctrl a${RESET}                  - Leader key"
    echo

    echo -e "${ORANGE}Session management${RESET}"
    echo -e "${MAGENTA}tmux new -s <name>${RESET} or ${MAGENTA}tn${RESET}                   - Create new session"
    echo -e "${MAGENTA}tmux new-session -A -s <name>${RESET} or ${MAGENTA}tns${RESET}       - Create session if not exists or attach"
    echo -e "${MAGENTA}tmux ls${RESET} or ${MAGENTA}tl${RESET}                             - List sessions"
    echo -e "${MAGENTA}tmux attach -t <name>${RESET} or ${MAGENTA}ta${RESET}                - Attach to session"
    echo -e "${MAGENTA}tmux switch -t <name>${RESET} or ${MAGENTA}ts${RESET}                - Switch to another session"
    echo -e "${MAGENTA}tmux rename-session -t <old> <new>${RESET} or ${MAGENTA}tres${RESET}  - Rename session"
    echo -e "${MAGENTA}tmux kill-session -t <name>${RESET} or ${MAGENTA}tks${RESET}         - Kill session"
    echo -e "${MAGENTA}tmux kill-server${RESET} or ${MAGENTA}tkss${RESET}                   - Kill tmux server"
    echo -e "${MAGENTA}Ctrl a \$${RESET}                  - Rename current session"
    echo -e "${MAGENTA}Ctrl a d${RESET}                  - Detach from session"
    echo -e "${MAGENTA}Ctrl a s${RESET}                  - List and select sessions"
    echo -e "${MAGENTA}Ctrl a Ctrl t${RESET}             - Choose session from tree"
    echo

    echo -e "${ORANGE}Window management${RESET}"
    echo -e "${MAGENTA}Ctrl a c${RESET}                  - Create new window"
    echo -e "${MAGENTA}Ctrl a X${RESET}                  - Close current window"
    echo -e "${MAGENTA}Ctrl a n${RESET} or ${MAGENTA}Alt n${RESET}         - Next window"
    echo -e "${MAGENTA}Ctrl a p${RESET} or ${MAGENTA}Alt p${RESET}         - Previous window"
    echo -e "${MAGENTA}Ctrl a w${RESET}                  - List windows"
    echo -e "${MAGENTA}Ctrl a ,${RESET} or ${MAGENTA}trew${RESET}          - Rename current window"
    echo -e "${MAGENTA}Ctrl a Ctrl m${RESET}             - Move window to specific index"
    echo -e "${MAGENTA}Alt <1-9>${RESET}                 - Jump to window <1-9>"
    echo -e "${MAGENTA}tmux list-windows${RESET} or ${MAGENTA}tw${RESET}   - List windows"
    echo

    echo -e "${ORANGE}Pane creation and layout${RESET}"
    echo -e "${MAGENTA}Ctrl a |${RESET} or ${MAGENTA}Alt \\\\${RESET}         - Split vertically"
    echo -e "${MAGENTA}Ctrl a -${RESET} or ${MAGENTA}Alt -${RESET}         - Split horizontally"
    echo -e "${MAGENTA}Ctrl a space${RESET}              - Cycle through layouts"
    echo -e "${MAGENTA}Ctrl a =${RESET}                  - Equalize pane sizes"
    echo

    echo -e "${ORANGE}Pane navigation${RESET}"
    echo -e "${MAGENTA}Alt left/right/up/down arrow${RESET} - Move between panes"
    echo -e "${MAGENTA}Ctrl a q${RESET}                     - Show pane numbers (press number to select)"
    echo -e "${MAGENTA}Ctrl a z${RESET}                     - Toggle pane zoom (fullscreen)"
    echo -e "${MAGENTA}Ctrl a {${RESET}                     - Swap pane with previous"
    echo -e "${MAGENTA}Ctrl a }${RESET}                     - Swap pane with next"
    echo -e "${MAGENTA}Ctrl a Ctrl s${RESET}                - Synchronize panes (send input to all panes)"
    echo

    echo -e "${ORANGE}Pane resizing${RESET}"
    echo -e "${MAGENTA}Alt Shift left arrow${RESET}      - Decrease width by 5"
    echo -e "${MAGENTA}Alt Shift right arrow${RESET}     - Increase width by 5"
    echo -e "${MAGENTA}Alt Shift down arrow${RESET}      - Decrease height by 2"
    echo -e "${MAGENTA}Alt Shift up arrow${RESET}        - Increase height by 2"
    echo

    echo -e "${ORANGE}Pane management${RESET}"
    echo -e "${MAGENTA}Ctrl a x${RESET}                  - Close current pane"
    echo -e "${MAGENTA}Ctrl a !${RESET}                  - Break pane into new window"
    echo

    echo -e "${ORANGE}Copy mode and clipboard${RESET}"
    echo -e "${MAGENTA}Ctrl a [${RESET}                  - Enter copy mode"
    echo -e "${MAGENTA}Ctrl c${RESET} or ${MAGENTA}q${RESET}               - Exit copy mode"
    echo -e "${MAGENTA}Space${RESET}                     - Start selection in copy mode"
    echo -e "${MAGENTA}Enter${RESET}                     - Copy selection in copy mode"
    echo -e "${MAGENTA}Ctrl a ]${RESET}                  - Paste copied text"
    echo -e "${MAGENTA}Shift + mouse drag${RESET}        - Highlight and copy text"
    echo -e "${MAGENTA}v${RESET}                         - Start selection in vi mode"
    echo -e "${MAGENTA}y${RESET}                         - Copy selection to system clipboard (tmux-yank)"
    echo -e "${MAGENTA}Y${RESET}                         - Copy current line to system clipboard (tmux-yank)"
    echo -e "${MAGENTA}Ctrl a y${RESET}                  - Copy current pane working directory"
    echo

    echo -e "${ORANGE}Configuration${RESET}"
    echo -e "${MAGENTA}Ctrl a r${RESET}                  - Reload tmux configuration file"
    echo -e "${MAGENTA}Ctrl a :${RESET}                  - Enter command mode"
    echo

    echo -e "${ORANGE}Plugin management - TPM${RESET}"
    echo -e "${MAGENTA}Ctrl a Ctrl I${RESET}             - Install plugins"
    echo -e "${MAGENTA}Ctrl a Ctrl u${RESET}             - Update plugins"
    echo -e "${MAGENTA}Ctrl a Alt u${RESET}              - Uninstall removed plugins"
    echo -e "${MAGENTA}Ctrl a Ctrl S${RESET}             - Save tmux session (tmux-resurrect)"
    echo -e "${MAGENTA}Ctrl a Ctrl r${RESET}             - Restore tmux session (tmux-resurrect)"
    echo -e "${MAGENTA}Ctrl a Ctrl b${RESET}             - Backup tmux session (tmux-resurrect)"
    echo

    echo -e "${ORANGE}Advanced session commands${RESET}"
    echo -e "${MAGENTA}tmux new-session -d -s <name>${RESET}         - Start a detached session"
    echo -e "${MAGENTA}tmux select-layout tiled${RESET} or ${MAGENTA}tslt${RESET}      - Tile all panes"
    echo
}

# VS Code help
vscfo() {
    echo ""
    echo -e "${BLUE}Visual Studio Code Cheatsheet:${RESET}"
    echo ""
    echo -e "${ORANGE}Navigation:${RESET}"
    echo -e "${MAGENTA}Ctrl p             ${RESET} - Quick Open - Rapidly find and open files"
    echo -e "${MAGENTA}Ctrl Shift p       ${RESET} - Open Command Palette"
    echo -e "${MAGENTA}Ctrl Shift Ã§       ${RESET} - Open Terminal"
    echo

    echo -e "${ORANGE}Editing:${RESET}"
    echo -e "${MAGENTA}Ctrl /             ${RESET}  - Toggle line comment"
    echo -e "${MAGENTA}Shift Alt a        ${RESET}  - Toggle block comment"
    echo -e "${MAGENTA}Shift Alt f        ${RESET}  - Format entire file"
    echo -e "${MAGENTA}Alt Up/Down        ${RESET}  - Move entire line or selected lines up or down"
    echo -e "${MAGENTA}Shift Alt Up/Down  ${RESET}  - Copy the current line or selection up or down"
    echo -e "${MAGENTA}Ctrl Shift k       ${RESET}  - Delete the current line"
    echo -e "${MAGENTA}Shift Alt Right/Left${RESET} - Expand or shrink the current selection"
    echo -e "${MAGENTA}Ctrl Shift l       ${RESET}  - Select all occurrences of current selection"
    echo

    echo -e "${ORANGE}Multi-cursor:${RESET}"
    echo -e "${MAGENTA}Ctrl d             ${RESET}                                             - Select next occurrence of current word"
    echo -e "${MAGENTA}Ctrl Shift l       ${RESET}                                             - Add cursors to all instances of the current selection"
    echo -e "${MAGENTA}Alt Click          ${RESET}                                             - Multi-cursor editing"
    echo -e "${MAGENTA}Ctrl Alt Up/Down   ${RESET}                                             - Add a cursor above or below the current line"
    echo -e "${MAGENTA}Shift Alt Drag     ${RESET}                                             - Column (block) selection"
    echo -e "${MAGENTA}editor.multiCursorModifier${RESET}                                      - Set to Ctrl+Click or Alt+Click for multi-cursor (see Selection menu)"
    echo -e "${MAGENTA}Press and Hold scrollwheel button and drag the mouse up or down${RESET} - Create a cursor on each line."
    echo

    echo -e "${ORANGE}Panels & Views:${RESET}"
    echo -e "${MAGENTA}Ctrl \`            ${RESET}  - Toggle integrated terminal"
    echo -e "${MAGENTA}Ctrl Shift x       ${RESET} - Open the Extensions panel"
    echo -e "${MAGENTA}Ctrl Shift g       ${RESET} - Open the Source Control panel"
    echo -e "${MAGENTA}Ctrl Shift m       ${RESET} - Open the Problems panel"
    echo

    echo -e "${ORANGE}Interface & Layout:${RESET}"
    echo -e "${MAGENTA}Ctrl k z           ${RESET} - Zen Mode (distraction-free)"
    echo -e "${MAGENTA}Ctrl \\             ${RESET} - Split the editor into two"
    echo -e "${MAGENTA}Ctrl b             ${RESET} - Show or hide the sidebar"
    echo

    echo -e "${ORANGE}Command Palette & Settings:${RESET}"
    echo -e "${MAGENTA}Ctrl Shift p       ${RESET} - Access all commands"
    echo -e "${MAGENTA}Ctrl k Ctrl s      ${RESET} - Open the keyboard shortcuts editor"
    echo -e "${MAGENTA}Ctrl ,             ${RESET} - Open the settings panel"
    echo

    echo -e "${ORANGE}Debugging:${RESET}"
    echo -e "${MAGENTA}F5                 ${RESET}   - Start or continue debugging"
    echo -e "${MAGENTA}Shift F5           ${RESET}   - Stop debugging"
    echo -e "${MAGENTA}F9                 ${RESET}   - Add or remove a breakpoint"
    echo -e "${MAGENTA}F10 / F11 / Shift F11${RESET} - Step over, into, or out during debugging"
    echo

    echo -e "${ORANGE}Productivity & Customization:${RESET}"
    echo -e "${MAGENTA}Shift Alt f        ${RESET} - Format the entire file"
    echo -e "${MAGENTA}Ctrl = / Ctrl -    ${RESET} - Increase/decrease editor font size"
    echo -e "${MAGENTA}Customize Shortcuts${RESET} - Open Keyboard Shortcuts editor (Ctrl k Ctrl s) or edit keybindings.json for advanced customization"
    echo

    echo -e "${ORANGE}Copilot:${RESET}"
    echo -e "${MAGENTA}Tab                ${RESET}      - Accepts the entire inline suggestion"
    echo -e "${MAGENTA}Alt + ]            ${RESET}      - Show next alternative inline suggestion"
    echo -e "${MAGENTA}Alt + [            ${RESET}      - Show previous alternative inline suggestion"
    echo -e "${MAGENTA}Ctrl + Right Arrow ${RESET}      - Accepts the next word of inline suggestion (partial accept)"
    echo -e "${MAGENTA}Ctrl + Alt + Right Arrow${RESET} - Accepts the next line of inline suggestion (partial accept)"
    echo -e "${MAGENTA}Esc                ${RESET}      - Dismisses the current inline suggestion"
    echo -e "${MAGENTA}Alt + \\           ${RESET}       - Forces Copilot to trigger an inline suggestion"
    echo -e "${MAGENTA}Ctrl + Enter       ${RESET}      - Opens the GitHub Copilot: Open Completions panel"
    echo -e "${MAGENTA}Ctrl + I           ${RESET}      - Starts Inline Chat"
    echo -e "${MAGENTA}Ctrl + Alt + I     ${RESET}      - Opens the dedicated Copilot Chat view"
    echo

    echo -e "${ORANGE}Other:${RESET}"
    echo -e "${MAGENTA}Ctrl k v           ${RESET} - Preview Markdown"
    echo -e "${MAGENTA}Windows key .      ${RESET} - Open emoji picker"
    echo
}


show_git_commands() {
    echo ""
    echo -e "${ORANGE}List of Git aliases and functions:${RESET}"
    echo -e "${MAGENTA}lazygit${RESET}         - Commit and push changes to a specified branch. Usage: ${YELLOW}lazygit '<commit_message>' <branch_name>${RESET}"
    echo -e "${MAGENTA}nb${RESET}              - Create a new Git branch. Usage: nb ${YELLOW}<branch_name>${RESET}"
    echo -e "${MAGENTA}gall${RESET}            - Add all changes to Git staging area (equal to git add -A)."
    echo -e "${MAGENTA}gst${RESET}             - Show the current status of the Git repository."
    echo -e "${MAGENTA}gdst${RESET}            - Show the current status of the Git repositories existing in current directory"
    echo -e "${MAGENTA}gppr${RESET}            - Show if the 'main' branch in local Git repositories is pushed to remote"
    echo -e "${MAGENTA}ga${RESET}              - Add file to Git staging area. Usage: ga <file>"
    echo -e "${MAGENTA}gf${RESET}              - Fetch updates from the remote Git repository (git fetch)."
    echo -e "${MAGENTA}gb${RESET}              - Show the list of Git branches."
    echo -e "${MAGENTA}gc${RESET}              - Commit staged changes with a message. Usage: ${YELLOW}gc '<commit_message>'${RESET}"
    echo -e "${MAGENTA}gcl${RESET}             - Clone a Git repository. Usage: ${YELLOW}gcl <repository_url>${RESET}"
    echo -e "${MAGENTA}gi${RESET}              - Initialize a new Git repository."
    echo -e "${MAGENTA}gl${RESET}              - Show the Git log with a detailed, colored graph, including hash, date, author, email, and subject."
    echo -e "${MAGENTA}gls${RESET}             - Show a concise, one-line graph of all Git log branches with decorations."
    echo -e "${MAGENTA}glps${RESET}            - Show the Git log across all branches, with concise commit details and file change statistics."
    echo -e "${MAGENTA}glpd${RESET}            - Show the Git log across all branches, with concise commit details and full patch (diff) information."
    echo -e "${MAGENTA}gstr${RESET}            - Show a simplified graph of the Git log, displaying only decorated commits (e.g., merge points, branch tips)."
    echo -e "${MAGENTA}gp${RESET}              - Push changes to a remote Git repository. Usage: ${YELLOW}gp <branch_name>${RESET}"
    echo -e "${MAGENTA}gu${RESET}              - Pull updates from the remote Git repository (git pull)."
    echo -e "${MAGENTA}gs${RESET}              - Switch Git branches. Usage: ${YELLOW}gs <branch_name>${RESET}"
    echo -e "${MAGENTA}gsts${RESET}            - Show the short status of the Git repository."
    echo -e "${MAGENTA}gdif${RESET}            - Show the differences between the working directory and the last commit."
    echo -e "${MAGENTA}gloa${RESET}            - Filter Git log by author. Usage: ${YELLOW}git log --author <author name or email>${RESET}"
    echo -e "${MAGENTA}glof${RESET}            - Follow a file's history in Git log through renames. Usage: ${YELLOW}git log --follow <file>${RESET}"
    echo
}

show_kubernetes_commands() {
    echo ""
    echo -e "${ORANGE}List of Kubernetes aliases and functions:${RESET}"
    echo -e "${MAGENTA}k${RESET}      - Kubernetes alias for kubectl."
    echo -e "${MAGENTA}ks${RESET}     - Kubernetes alias for kubectl with the kube-system namespace."
    echo
    echo -e "${BLUE}## Cluster Commands:${RESET}"
    echo -e "${MAGENTA}kci${RESET}    - Display cluster information."
    echo -e "${MAGENTA}kgnw${RESET}   - Get the list of nodes with wide output (shows additional information)."
    echo
    echo -e "${BLUE}## Create resources:${RESET}"
    echo -e "${MAGENTA}kcf${RESET}    - Create a Kubernetes resource from a file. ${YELLOW}Usage: kcf <file.yaml>${RESET}"
    echo -e "${MAGENTA}kaf${RESET}    - Apply a Kubernetes resource from a file. ${YELLOW}Usage: kaf <file.yaml>${RESET}"
    echo
    echo -e "${BLUE}## Get resources:${RESET}"
    echo -e "${MAGENTA}kgn${RESET}    - Get the list of nodes in the Kubernetes cluster."
    echo -e "${MAGENTA}kgp${RESET}    - Get the list of pods in the Kubernetes cluster."
    echo -e "${MAGENTA}kgpa${RESET}   - Get the list of pods in all namespaces in the Kubernetes cluster."
    echo -e "${MAGENTA}kgs${RESET}    - Get the list of services in the Kubernetes cluster."
    echo -e "${MAGENTA}kgd${RESET}    - Get the list of deployments in the Kubernetes cluster."
    echo -e "${MAGENTA}kgns${RESET}   - Get the list of namespaces in the Kubernetes cluster."
    echo
    echo -e "${BLUE}## Delete:${RESET}"
    echo -e "${MAGENTA}kd${RESET}     - Delete a Kubernetes resource. Usage: ${YELLOW}kd <resource_type> <resource_name>${RESET}"
    echo -e "${MAGENTA}kdp${RESET}    - Delete a Kubernetes pod. Usage: ${YELLOW}kdp <pod_name>${RESET}"
    echo -e "${MAGENTA}kds${RESET}    - Delete a Kubernetes service. Usage: ${YELLOW}kds <service_name>${RESET}"
    echo -e "${MAGENTA}kdd${RESET}    - Delete a Kubernetes deployment. Usage: ${YELLOW}kdd <deployment_name>${RESET}"
    echo -e "${MAGENTA}kdn${RESET}    - Delete a Kubernetes namespace. Usage: ${YELLOW}kdn <namespace_name>${RESET}"
    echo
    echo -e "${BLUE}## Documentation & Logs:${RESET}"
    echo -e "${MAGENTA}kexp${RESET}   - Show documentation for a Kubernetes resource type or existing resource. Usage: ${YELLOW}kexp <resource>${RESET}"
    echo -e "${MAGENTA}kdesc${RESET}  - Describe Kubernetes resources. Usage: ${YELLOW}kdesc <resource_type> <resource_name>${RESET}"
    echo -e "${MAGENTA}kl${RESET}     - Show logs for a pod. Usage: ${YELLOW}kl <pod_name>${RESET}"
    echo
    echo -e "${BLUE}## Others:${RESET}"
    echo -e "${MAGENTA}ked${RESET}    - Edit a Kubernetes resource. Usage: ${YELLOW}ked <resource_type>/<resource_name>${RESET}"
    echo -e "${MAGENTA}ke${RESET}     - Execute a command inside a running pod. Usage: ${YELLOW}ke <pod_name> -- <command>${RESET}"
    echo -e "${MAGENTA}ksetns${RESET} - Jump to namespace for kubectl context. Usage: ${YELLOW}ksetns <namespace>${RESET}"
    echo
}

show_utility_commands() {
    echo ""
    echo -e "${ORANGE}List of Terminal Utility alias and functions:${RESET}"
    echo -e "${MAGENTA}l        ${RESET} - List files."
    echo -e "${MAGENTA}ls        ${RESET} - Long list."
    echo -e "${MAGENTA}ll        ${RESET} - Long list including hidden files."
    echo -e "${MAGENTA}v         ${RESET} - vim"
    echo -e "${MAGENTA}aqui      ${RESET} - Open the current directory in Windows Explorer (WSL Only)."
    echo -e "${MAGENTA}fmedia    ${RESET} - Move all .mkv and .mp4 files to the current directory."
    echo -e "${MAGENTA}cdd       ${RESET} - Change directory to Windows Desktop on WSL (WSL Only)."
    echo -e "${MAGENTA}explain   ${RESET} - Explains the given command or enters interactive mode to explain commands."
    echo -e "${MAGENTA}tldr      ${RESET} - Explains the given command and provides examples."
    echo -e "${MAGENTA}data      ${RESET} - Print the current date and time."
    echo -e "${MAGENTA}tempolx   ${RESET} - Get the weather in Lisboa."
    echo -e "${MAGENTA}temposx   ${RESET} - Get the weather in Seixal."
    echo -e "${MAGENTA}tempolxf  ${RESET} - Get the full weather info in Lisboa."
    echo -e "${MAGENTA}temposxf  ${RESET} - Get the full weather info in Seixal."
    echo -e "${MAGENTA}tempo     ${RESET} - Get the weather in a specified city. Usage: ${YELLOW}tempo <city>${RESET}"
    echo -e "${MAGENTA}tempof    ${RESET} - Get the full weather info in a specified city. Usage: ${YELLOW}tempof <city>${RESET}"
    echo -e "${MAGENTA}dus       ${RESET} - Show disk usage of files and directories."
    echo -e "${MAGENTA}net       ${RESET} - Show network interfaces and their status."
    echo -e "${MAGENTA}ippub     ${RESET} - Show Public IP."
    echo -e "${MAGENTA}ippubf    ${RESET} - Show information on ISP and Public IP"
    echo -e "${MAGENTA}field     ${RESET} - Extract specific fields from a line. Usage: ${YELLOW}field <column_number> <delimiter>${RESET}"
    echo -e "${MAGENTA}epoch     ${RESET} - Convert epoch to human-readable date. Usage: ${YELLOW}epoch <epoch_time>${RESET}"
    echo -e "${MAGENTA}lintsh    ${RESET} - Lint shell scripts using ShellCheck. Usage: ${YELLOW}lintsh <file.sh>${RESET}"
    echo -e "${MAGENTA}fmtsh     ${RESET} - Format shell scripts using shfmt. Usage: ${YELLOW}fmtsh <file.sh>${RESET}"
    echo -e "${MAGENTA}rb        ${RESET} - Reload $HOME/.bashrc"
    echo -e "${MAGENTA}etx       ${RESET} - Open $HOME/.config/tmux/tmux.config in vim"
    echo -e "${MAGENTA}es        ${RESET} - Open current starship configuration in vim - $HOME/.config/starship.toml"
    echo -e "${MAGENTA}eb        ${RESET} - Open $HOME/.bashrc in vim"
    echo -e "${MAGENTA}ebt       ${RESET} - Open $HOME/.bash_tools in vim"
    echo -e "${MAGENTA}evrc      ${RESET} - Open $HOME/.vimrc in vim"
    echo -e "${MAGENTA}eai       ${RESET} - Open $HOME/.config/ansible/inventory in vim"
    echo -e "${MAGENTA}wdir      ${RESET} - Change directory to $HOME/work"
    echo -e "${MAGENTA}gdir      ${RESET} - Change directory to $HOME/git"
    echo -e "${MAGENTA}ldir      ${RESET} - Change directory to $HOME/lab"
    echo -e "${MAGENTA}ddir      ${RESET} - Change directory to $HOME/dotfiles"
    echo -e "${MAGENTA}dsk       ${RESET} - Change directory to a specified directory in /mnt. Usage: ${YELLOW}dsk <drive>${RESET}"
    echo -e "${MAGENTA}vimfo     ${RESET} - Show custom vim keymaps and cheatsheet"
    echo -e "${MAGENTA}tmuxfo    ${RESET} - Show custom tmux keymaps and cheatsheet"
    echo -e "${MAGENTA}vscfo     ${RESET} - Show Visual Studio Code keymaps and cheatsheet"
    echo -e "${MAGENTA}svim      ${RESET} - Edit files with sudo. Equal to 'sudoedit' and 'sudo -e'"
    echo -e "${MAGENTA}..        ${RESET} - Go up one directory"
    echo -e "${MAGENTA}...       ${RESET} - Go up two directories"
    echo -e "${MAGENTA}.3        ${RESET} - Go up three directories"     
    echo -e "${MAGENTA}.4        ${RESET} - Go up four directories"
    echo -e "${MAGENTA}.5        ${RESET} - Go up five directories"
    echo -e "${MAGENTA}rg        ${RESET} - Enhanced ripgrep: searches hidden files, smart case, custom colors, no zips. Usage: ${YELLOW}rg <pattern> [path]${RESET}"
    echo -e "${MAGENTA}rga       ${RESET} - Search all files: includes hidden, ignored, and binary files. Usage: ${YELLOW}rga <pattern> [path]${RESET}"
    echo -e "${MAGENTA}rgs       ${RESET} - Search only staged Git files. Usage: ${YELLOW}rgs <pattern>${RESET}"
    echo -e "${MAGENTA}pastel    ${RESET} - Generate, list, analyze, convert and manipulate colors${RESET}"
    echo -e "${MAGENTA}glow      ${RESET} - Render Markdown files in the terminal with syntax highlighting. Usage: ${YELLOW}glow <file.md>${RESET} or interactive mode with files in current directory ${YELLOW}glow${RESET}"
    echo -e "${MAGENTA}bat       ${RESET} - View files with syntax highlighting, line numbers, and Git integration. Usage: ${YELLOW}bat <file>${RESET}"
    echo -e "${MAGENTA}bats      ${RESET} - View files as plain text, without pager, syntax highlighting, line numbers, or Git integration. Usage: ${YELLOW}bats <file>${RESET}"
    echo -e "${MAGENTA}ex        ${RESET} - Extracts various compressed file types automatically. Usage: ${YELLOW}ex <path/file_name_1.ext> [path/file_name_2.ext]...${RESET}"
}

show_brew_commands () {
    echo ""
    echo -e "${ORANGE}List of Brew commands:${RESET}"
    echo -e "${MAGENTA}brew install     ${RESET} - Installs a package. Usage: ${YELLOW}brew install <formula>${RESET}"
    echo -e "${MAGENTA}brew update      ${RESET} - Updates Homebrew and its package list. Usage: ${YELLOW}brew update${RESET}"
    echo -e "${MAGENTA}brew upgrade     ${RESET} - Upgrades all outdated installed packages. Usage: ${YELLOW}brew upgrade${RESET}"
    echo -e "${MAGENTA}brew search      ${RESET} - Searches for available packages. Usage: ${YELLOW}brew search <text>${RESET}"
    echo -e "${MAGENTA}brew list        ${RESET} - Lists all installed packages. Usage: ${YELLOW}brew list${RESET}"
    echo -e "${MAGENTA}brew uninstall   ${RESET} - Uninstalls a package. Usage: ${YELLOW}brew uninstall <formula>${RESET}"
    echo -e "${MAGENTA}brew doctor      ${RESET} - Diagnoses problems with your installation. Usage: ${YELLOW}brew doctor${RESET}"
}

show_media_commands() {
    echo ""
    echo -e "${ORANGE}List of Media Download functions:${RESET}"
    echo -e "${BLUE}## Youtube (Download audio and/or video):${RESET}"
    echo -e "${MAGENTA}getyt         ${RESET}    - Download audio from a YouTube video and save it in desktop as MP3. Usage: ${YELLOW}getyt <url>${RESET}"
    echo -e "${MAGENTA}getytmp4      ${RESET}    - Download audio from a YouTube video and save it in desktop as MP4 1080p. Usage: ${YELLOW}getytmp4 <url>${RESET}"
    echo -e "${MAGENTA}getytplist    ${RESET}    - Download audio from all videos and save it in desktop in a YouTube playlist. Usage: ${YELLOW}getytplist <url>${RESET}"
    echo -e "${MAGENTA}getytplistmp4 ${RESET}    - Download all videos and save it in desktop in a YouTube playlist in MP4 format. Usage: ${YELLOW}getytplistmp4 <url>${RESET}"
    echo -e "${MAGENTA}getytplistmp4subs${RESET} - Download all videos and save it in desktop in a YouTube playlist in MP4 format with subtitles. Usage: ${YELLOW}getytplistmp4subs <url>${RESET}"
    echo -e "${MAGENTA}getytmp4subs  ${RESET}    - Download a YouTube video and save it in desktop in MP4 format (1080p) with subtitles. Usage: ${YELLOW}getytmp4subs <url>${RESET}"
    echo -e "${MAGENTA}getytformats  ${RESET}    - Check available video/audio formats for a YouTube video (debug tool). Usage: ${YELLOW}getytformats <url>${RESET}"
    echo -e "${MAGENTA}getytflex     ${RESET}    - Flexible YouTube downloader with quality options. Usage: ${YELLOW}getytflex <url> <format> [quality]${RESET} \nFormat: ${YELLOW}mp3|audio|mp4|video${RESET} | Quality: ${YELLOW}720|1080|1440|4k${RESET}"
    echo
    echo -e "${BLUE}## Spotify (Download audio):${RESET}"
    echo -e "${MAGENTA}getspot       ${RESET} - Download a song from Spotify and save it in desktop. Usage: ${YELLOW}getspot <url>${RESET}"
    echo -e "${MAGENTA}getalb        ${RESET} - Download an album from Spotify and save it in desktop. Usage: ${YELLOW}getalb <url>${RESET}"
    echo -e "${MAGENTA}getplay       ${RESET} - Download a playlist from Spotify and save it in desktop. Usage: ${YELLOW}getplay <url>${RESET}"
    echo
}

show_starship_commands() {
    echo ""
    echo -e "${ORANGE}List of Customization functions:${RESET}"
    echo -e "${MAGENTA}pcolor           ${RESET}     - Lists themes and change theme of prompt"
    echo -e "${MAGENTA}pskinf            ${RESET}    - Changes configuration to detailed/full"
    echo -e "${MAGENTA}pskins            ${RESET}    - Changes configuration to simple"
    echo -e "${MAGENTA}starship config  ${RESET}     - Show current Starship prompt configuration."
    echo -e "${MAGENTA}starship print-config${RESET} - Print the current Starship prompt configuration."
    echo -e "${MAGENTA}starship explain ${RESET}     - Explain current Starship prompt configuration."
    echo
    echo -e "${BLUE}Git Status Indicators:${RESET}\n"
    echo -e "  ${MAGENTA}ïª (count)${RESET}          - ${RED}conflicted:${RESET} You have merge conflicts that need to be resolved."
    echo -e "  ${BLUE}ó°½${RESET}                   - ${BLUE}up_to_date:${RESET} Your current branch is clean and in sync with its remote."
    echo -e "  ${RED}ó° (count)${RESET}          - ${RED}untracked:${RESET} You have new, untracked files."
    echo -e "  ${MAGENTA}ïª (count)${RESET}          - ${YELLOW}ahead:${RESET} Your local branch is ahead of its remote by 'count' commits."
    echo -e "  ${MAGENTA}ïª(ahead) ï«(behind)${RESET} - ${YELLOW}diverged:${RESET} Your local branch has diverged from its remote; it's ahead by 'ahead' and behind by 'behind' commits."
    echo -e "  ${MAGENTA}ï« (count)${RESET}          - ${YELLOW}behind:${RESET} Your local branch is behind its remote by 'count' commits."
    echo -e "  ${BLUE}ï (count)${RESET}          - ${BLUE}stashed:${RESET} You have changes stashed."
    echo -e "  ${YELLOW}ó°¿ (count)${RESET}          - ${YELLOW}modified:${RESET} You have uncommitted, modified files."
    echo -e "  ${BLUE}ó° (count)${RESET}          - ${BLUE}staged:${RESET} You have 'count' changes staged for commit (added to index)."
    echo -e "  ${YELLOW}ó°¸ (count)${RESET}          - ${YELLOW}renamed:${RESET} You have uncommitted, renamed files."
    echo -e "  ${RED}ó°¶ (count)${RESET}          - ${RED}deleted:${RESET} You have uncommitted, deleted files."
    echo
}

show_help() {
    echo ""
    echo -e "${YELLOW}Available sections:${RESET}"
    echo "- git            (Git commands)"
    echo "- kubernetes     (or k8s - Kubernetes commands)"
    echo "- utils          (or cli, utility, utilities, terminal - Terminal utilities)"
    echo "- youtube        (or yt, spotify, media - Media download commands)"
    echo "- starship       (or theme, prompt, ps1, custom, customization, skin - Starship prompt customization)"
    echo "- brew           (Homebrew commands)"
    echo "- vim            (or vi, editor - Vim commands)"
    echo "- tmux           (Tmux commands)"
    echo "- vsc            (or vscode, code - VS Code commands)"
    echo "- all            (Show all sections)"
    echo
}


# Main lscom function
lscom() {
    local section="${1:-all}"

    case "$section" in
    "git")
        show_git_commands
        ;;
    "brew" | "homebrew")
        show_brew_commands
        ;;
    "k8s" | "kubernetes")
        show_kubernetes_commands
        ;;
    "utils" | "utilities" | "terminal" | "utility" | "cli")
        show_utility_commands
        ;;
    "youtube" | "yt" | "spotify" | "media")
        show_media_commands
        ;;
    "starship" | "prompt" | "ps1" | "custom" | "customization" | "theme" | "skin")
        show_starship_commands
        ;;
    "vim" | "vi" | "editor")
        vimfo
        ;;
    "tmux")
        tmuxfo
        ;;
    "vsc" | "vscode" | "code")
        vscfo
        ;;
    "all" | "full" | "")
        show_git_commands
        echo
        show_kubernetes_commands
        echo
        show_utility_commands
        echo
        show_media_commands
        echo
        show_starship_commands
        echo
        show_brew_commands
        echo
        vimfo
        echo
        tmuxfo
        echo
        vscfo
        ;;
    *)
        show_help
        ;;
    esac
}

# Load external files - uncomment if you have them
#. ~/.bash_aliases 2>/dev/null || true
#. ~/.bashrc.local 2>/dev/null || true

# load completion
. /etc/bash/bash_completion 2>/dev/null || . ~/.bash_completion 2>/dev/null

true
