export EDITOR='vim'
export HISTSIZE=5000
export HISTFILESIZE=5000
export GREP_COLOR='1;36'
export GREP_COLORS='mt=1;36'
export GREP_OPTIONS='--color=auto'
export PAGER='less'
export TZ='Europe/Lisbon'
export DESKTOPWINSL='/mnt/c/Users/GonÃ§alo Sousa/'
export HISTCONTROL='ignoredups'
export HISTSIZE=5000
export HISTFILESIZE=5000
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export ANSIBLE_CONFIG="$HOME/.config/ansible/config.ini"
export ANSIBLE_INVENTORY="$HOME/.config/ansible/inventory.yaml"


#Color Man pages
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'



MAGENTA="\e[35m"
YELLOW="\e[33m"
BLUE="\e[34m"
GREEN="\e[32m"
RESET="\e[0m"
ORANGE="\e[38;5;214m"

# Custom Alias
alias ll='ls -la'
alias aqui='explorer.exe .'
alias fmedia='find . -type f \( -name "*.mp4" -o -name "*.mkv" \) -exec mv {} . \;'
alias cdd='cd "${DESKTOPWINSL}Desktop"'
alias data='echo $(date "+%d/%m/%Y %H:%M:%S")'
alias tempolx='curl wttr.in/Lisboa\?format=4'
alias temposx='curl wttr.in/Seixal\?format=4'
alias tempolxf='curl wttr.in/Lisboa'
alias temposxf='curl wttr.in/Seixal'
alias code='"${DESKTOPWINSL}AppData/Local/Programs/Microsoft VS Code/Code.exe"'
alias dus='du -sh * 2>/dev/null'
alias net='ip -br -c a'
alias ippub='curl -s https://ipinfo.io/ip && echo'
alias ippubf='curl -s https://ipinfo.io && echo'
alias rb="source $HOME/.bashrc"
alias eb="vim $HOME/.bashrc"
alias ebt="vim $HOME/.bash_tools"
alias evrc="vim $HOME/.vimrc"
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias wdir='cd $HOME/work'
alias gdir='cd $HOME/git'
alias ldir='cd $HOME/lab'
alias ddir='cd $HOME/dotfiles'
alias svim='sudoedit'
alias v='vim'

# Git Aliases and functions
alias nb='git checkout -b'
alias gall='git add -A'
alias gst='git status'
alias ga='git add'
alias gf='git fetch'
alias gb='git branch'
alias gc='git commit -m'
alias gcl='git clone'
alias gi='git init'
alias gl='git log'
alias gls='git log --graph --oneline --decorate --all'
alias glpd='git log --graph --oneline --decorate --all -p --pretty=format:"%C(auto)%h %C(cyan)%an <%ae> %C(yellow)%ad %C(reset)%s %C(auto)%d %C(reset)"'
alias glps='git log --graph --oneline --decorate --all --stat --pretty=format:"%C(auto)%h %C(cyan)%an <%ae> %C(yellow)%ad %C(reset)%s %C(auto)%d %C(reset)"'
alias glp='git log --graph --oneline --decorate --all --pretty=format:"%C(auto)%h %C(cyan)%an <%ae> %C(yellow)%ad %C(reset)%s %C(auto)%d %C(reset)" --date=format:"%d/%m/%Y %H:%M:%S"'
alias gstr='git log --oneline --simplify-by-decoration --graph --all'
alias gp='git push origin'
alias gst='git status'
alias gu='git pull' # gu = git update
alias gs='git switch'

function lazygit() {
    if [ -z "$1" ]; then
        echo "Error: Commit message is required."
        echo "Usage: lazygit '<commit_message>' <branch_name>"
        return 1
    fi

    if [ -z "$2" ]; then
        echo "Error: Branch name is required"
        echo "Usage: lazygit '<commit_message>' <branch_name>"
        return 1
    fi

    git add -A
    git commit -m "$1"
    git push -u origin "$2"
}

gdst() {
    found_repo=false
    for dir in */; do
        echo -e "\n${BLUE}=== Checking ${ORANGE}$dir${RESET}${BLUE} ===${RESET}"

        if [ -d "$dir/.git" ]; then
            found_repo=true
            output=$(cd "$dir" && git status -s)

            if [[ -z "$output" ]]; then
                echo -e "${GREEN}No changes${RESET}"
            else
                echo -e "${YELLOW}$output${RESET}"
            fi
        else
            echo -e "${MAGENTA}Not initialized${RESET}"
        fi
    done

    if ! $found_repo; then
        echo -e "${RED}No Git repositories found.${RESET}"
    fi
}

# tmux alias
alias t='tmux'                    
alias ta='tmux attach -t'
alias td='tmux detach'         
alias tl='tmux list-sessions'     
alias tn='tmux new -s'            
alias tk='tmux kill-session -t'   
alias ts='tmux switch -t'         
alias tks='tmux kill-server'      
alias trew='tmux rename-window'
alias tres='tmux rename-sessiont -t'
alias tw='tmux list-windows'      
alias tns='tmux new-session -A -s'


# Kubernetes Alias
alias k='kubectl'
alias ks='kubectl -n kube-system'
alias kdesc='kubectl describe'
alias kl='kubectl logs'
alias ke='kubectl exec -it'
alias kexp='kubectl explain'
alias ked='kubectl edit'
alias ksetns='kubectl config set-context --current --namespace'

## Cluster commands
alias kci='kubectl cluster-info'
alias kgnw='kubectl get nodes -o wide'

## Create resources
alias kcf='kubectl create -f'
alias kaf='kubectl apply -f'

## Get resources
alias kgn='kubectl get nodes'
alias kgp='kubectl get pods'
alias kgpl='kubectl get pods -l'
alias kgpa='kubectl get pods --all-namespaces'
alias kgs='kubectl get services'
alias kgd='kubectl get deployments'
alias kgns='kubectl get namespaces'

## Delete
alias kd='kubectl delete'
alias kdp='kubectl delete pod'
alias kds='kubectl delete services'
alias kdd='kubectl delete deployments'
alias kdn='kubectl delete namespaces'

# Custom functions
field() {
    awk -F "${2:- }" "{ print \$${1:-1} }"
}

tempo() {
    curl -s "wttr.in/${1}?format=4"
}

tempof() {
    curl -s "wttr.in/${1}"
}

dsk() {
    if [ -d "/mnt/$1" ]; then
        cd "/mnt/$1" || return
    else
        echo "Drive /mnt/$1 not found."
    fi
}

explain() {
    if [ "$#" -eq 0 ]; then
        while read -p "Command: " cmd; do
            curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
        done
        echo "Bye!"
    elif [ "$#" -eq 1 ]; then
        curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
    else
        echo "Usage"
        echo "explain                  interactive mode."
        echo "explain 'cmd -o | ...'   one quoted command to explain it."
    fi
}

lintsh() {
  shellcheck "$1"
}

fmtsh() {
  shfmt -i 2 -sr -ci -w "$1"
}


epoch() {
    local num=${1:--1}
    printf '%(%B %d, %Y %-I:%M:%S %p %Z)T\n' "$num"
}

# Get mp3 file of youtube
function getyt() {
    yt-dlp --extract-audio --audio-format mp3 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube
function getytmp4() {
    yt-dlp -f 'bestvideo[height=1080]+bestaudio/best[height=1080]' --merge-output-format mp4 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp3 file of youtube playlist
function getytplist() {
    yt-dlp -x --audio-format mp3 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube playlist
function getytplistmp4() {
    yt-dlp -f 'bestvideo+bestaudio' --merge-output-format mp4 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube with subs
function getytmp4subs() {
    yt-dlp -f 'bestvideo[height=1080]+bestaudio/best[height=1080]' --merge-output-format mp4 --write-subs --embed-subs --sub-lang en --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube playlist with subs
function getytplistmp4subs() {
    yt-dlp -f 'bestvideo+bestaudio' --merge-output-format mp4 --write-subs --embed-subs --sub-lang en --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get Spotify track
function getspot() {
    spotdl --output "${DESKTOPWINSL}Desktop/{artist} - {title}" --format mp3 --bitrate 320k "$1"
}

## Get Spotify album
function getalb() {
    spotdl --output "${DESKTOPWINSL}Desktop/{artist} - {album}/{artist} - {title}" --format mp3 --bitrate 320k "$1"
}

# get vim help
vimfo() {
    echo -e "${BLUE}Vim Cheatsheet${RESET}\n"

    # Basic Commands
    echo -e "${ORANGE}Basic Commands:${RESET}"
    echo "${YELLOW}Not required 'Esc :'${RESET}"
    echo -e "${MAGENTA}\\q${RESET}  - Quit"
    echo -e "${MAGENTA}\\w${RESET}  - Save"
    echo -e "${MAGENTA}\\x${RESET}  - Save and quit"
    echo -e "${MAGENTA}\\/${RESET}  - Clear highlights\n"

    # Split Management
    echo -e "${ORANGE}Split Commands:${RESET}"
    echo -e "${YELLOW}Required 'Esc :':${RESET}"
    echo -e "${MAGENTA}:sp${RESET}   - Create horizontal split (same file)"
    echo -e "${MAGENTA}:new${RESET}  - Create horizontal split (new file)"
    echo -e "${MAGENTA}:vsp${RESET}  - Create vertical split (same file)"
    echo -e "${MAGENTA}:vnew${RESET} - Create vertical split (new file)\n"

    echo -e "${ORANGE}Split Control:${RESET}"
    echo -e "${MAGENTA}Ctrl w c${RESET} - Close current split"
    echo -e "${MAGENTA}Ctrl w o${RESET} - Close all splits except current\n"

    # Navigation
    echo -e "${ORANGE}Split Navigation:${RESET}"
    echo -e "${MAGENTA}Ctrl h${RESET} - Move to left split"
    echo -e "${MAGENTA}Ctrl j${RESET} - Move to down split"
    echo -e "${MAGENTA}Ctrl k${RESET} - Move to up split"
    echo -e "${MAGENTA}Ctrl l${RESET} - Move to right split\n"

    # Resizing
    echo -e "${ORANGE}Split Resizing:${RESET}"
    echo -e "${MAGENTA}Ctrl w +${RESET} - Increase height"
    echo -e "${MAGENTA}Ctrl w -${RESET} - Decrease height"
    echo -e "${MAGENTA}Ctrl w >${RESET} - Increase width"
    echo -e "${MAGENTA}Ctrl w <${RESET} - Decrease width"
    echo -e "${MAGENTA}Ctrl w =${RESET} - Equalize split sizes\n"

    # Launch Commands
    echo -e "${ORANGE}Launch with Splits:${RESET}"
    echo -e "${MAGENTA}vim -O file1.txt file2.txt${RESET} - Open with vertical split"
    echo -e "${MAGENTA}vim -o file1.txt file2.txt${RESET} - Open with horizontal split"
}

tmuxfo() {
    echo -e "${BLUE}Tmux Cheatsheet${RESET}\n"

    # Splitting Panes
    echo -e "${ORANGE}Splitting Panes:${RESET}"
    echo -e "${MAGENTA}Ctrl b %${RESET} - Split vertically"
    echo -e "${MAGENTA}Ctrl b \"${RESET} - Split horizontally\n"

    # Closing Panes
    echo -e "${ORANGE}Closing Panes:${RESET}"
    echo -e "${MAGENTA}Ctrl b x${RESET} - Close current pane"
    echo -e "${MAGENTA}Ctrl b !${RESET} - Break pane into new window\n"

    # Pane Navigation
    echo -e "${ORANGE}Pane Navigation:${RESET}"
    echo -e "${MAGENTA}Ctrl b h${RESET} - Move to left pane"
    echo -e "${MAGENTA}Ctrl b j${RESET} - Move to lower pane"
    echo -e "${MAGENTA}Ctrl b k${RESET} - Move to upper pane"
    echo -e "${MAGENTA}Ctrl b l${RESET} - Move to right pane"
    echo -e "${MAGENTA}Ctrl b q${RESET} - Show pane numbers\n"

    # Pane Resizing
    echo -e "${ORANGE}Pane Resizing:${RESET}"
    echo -e "${MAGENTA}Ctrl b Alt h${RESET} - Decrease width"
    echo -e "${MAGENTA}Ctrl b Alt l${RESET} - Increase width"
    echo -e "${MAGENTA}Ctrl b Alt j${RESET} - Decrease height"
    echo -e "${MAGENTA}Ctrl b Alt k${RESET} - Increase height"
    echo -e "${MAGENTA}Ctrl b =${RESET} - Equalize pane sizes\n"

    # Windows (Tabs)
    echo -e "${ORANGE}Windows (Tabs):${RESET}"
    echo -e "${MAGENTA}Ctrl b c${RESET} - Create new window"
    echo -e "${MAGENTA}Ctrl b n${RESET} - Next window"
    echo -e "${MAGENTA}Ctrl b p${RESET} - Previous window"
    echo -e "${MAGENTA}Ctrl b w${RESET} - List windows"
    echo -e "${MAGENTA}Ctrl b ,${RESET} - Rename current window"
    echo -e "${MAGENTA}Ctrl b &${RESET} - Close current window\n"

    #Sessions
    echo -e "${ORANGE}Sessions:${RESET}"
    echo -e "${MAGENTA}tmux new -s <name>${RESET} or ${MAGENTA}tn${RESET} - Create a new session"
    echo -e "${MAGENTA}tmux detach${RESET} or ${MAGENTA}td${RESET} - Detach from current session"
    echo -e "${MAGENTA}tmux ls${RESET} or ${MAGENTA}tl${RESET} - List sessions"
    echo -e "${MAGENTA}tmux attach -t <name>${RESET} or ${MAGENTA}ta${RESET} - Attach to session"
    echo -e "${MAGENTA}tmux detach${RESET} - Detach from current session"
    echo -e "${MAGENTA}tmux rename-session -t <old_name> <new_name>${RESET} or ${MAGENTA}tres${RESET} - Rename session" 
    echo -e "${MAGENTA}tmux kill-session -t <name>${RESET} or ${MAGENTA}tk${RESET} - Kill a session"
    echo -e "${MAGENTA}tmux switch -t <name>${RESET} or ${MAGENTA}ts${RESET} - Switch to another session\n"

    # Launching with Splits
    echo -e "${ORANGE}Launch with Splits:${RESET}"
    echo -e "${MAGENTA}tmux new-session -d -s <name>${RESET} - Start a detached session"
    echo -e "${MAGENTA}tmux new-session -A -s <name>${RESET} or ${MAGENTA}tns${RESET} - Create if not exists, or attach"
    echo -e "${MAGENTA}tmux split-window -h${RESET} - Split horizontally"
    echo -e "${MAGENTA}tmux split-window -v${RESET} - Split vertically"
    echo -e "${MAGENTA}tmux select-layout tiled${RESET} - Tile all panes"
    echo -e "${MAGENTA}tmux kill-server${RESET} or ${MAGENTA}tks${RESET} - Kill the tmux server\n"

    # Copy Mode
    echo -e "${ORANGE}Copying:${RESET}"
    echo -e "Use ${MAGENTA}Shift + mouse drag${RESET} to highlight and copy from the terminal"
    echo -e "Use ${MAGENTA}Ctrl b [${RESET} to enter copy mode (if mouse isn't working), to exit press ${MAGENTA}q${RESET}"
    echo -e "Then ${MAGENTA}Space${RESET} to start selection, and ${MAGENTA}Enter${RESET} to copy"
    echo -e "Paste with ${MAGENTA}Ctrl b ]${RESET}\n"
}


vscfoo() {
    ## FILL shortcuts and tips for VS Code
    echo -e "${MAGENTA}Ctrl P${RESET} - Quick Open - Rapidly find and open files"
    echo -e "${MAGENTA}Ctrl Shift P${RESET} - Open Command Palette"
    echo -e "${MAGENTA}Ctrl Shift Ã§${RESET} - Open Terminal"
    echo -e "${MAGENTA}Ctrl / ${RESET} - Toggle line comment"
    echo -e "${MAGENTA}Shift Alt A${RESET} - Toggle block comment"
    echo -e "${MAGENTA}Shift Alt f ${RESET} - Format entire file"
    echo -e "${MAGENTA}Alt Up/Down${RESET} - Move entire line or selected lines up or down"
    echo -e "${MAGENTA}Ctrl D${RESET} - Select next occurrence of current word"
    echo -e "${MAGENTA}Ctrl Shift L${RESET} - Select all occurrences of current selection"
    echo -e "${MAGENTA}Alt Click${RESET} - Multi-cursor editing"
    echo -e "${MAGENTA}Shift Alt F ${RESET} -  Format document"
    echo -e "${MAGENTA}Ctrl k Ctrl s ${RESET} - Open Keyboard Shortcuts"
    echo -e "${MAGENTA}F5${RESET} - Start Debugging"
    echo -e "${MAGENTA}Shift F5${RESET} - Stop Debugging"
    echo -e "${MAGENTA}F9${RESET} - Toggle Breakpoint"
    echo -e "${MAGENTA}F10${RESET} - Step Over"
    echo -e "${MAGENTA}F11${RESET} - Step Into"
    echo -e "${MAGENTA}Ctrl k v${RESET} - Preview markown"
    echo -e "${MAGENTA}Press and Hold scrollwheel button and drag the mouse up or down${RESET} - Create a cursor on each line."
}

show_git_commands() {
    echo -e "${ORANGE}List of Git aliases and functions:${RESET}"
    echo -e "${MAGENTA}lazygit${RESET} - Commit and push changes to a specified branch. Usage: ${YELLOW}lazygit '<commit_message>' <branch_name>${RESET}"
    echo -e "${MAGENTA}nb${RESET} - Create a new Git branch. Usage: nb ${YELLOW}<branch_name>${RESET}"
    echo -e "${MAGENTA}gall${RESET} - Add all changes to Git staging area (equal to git add -A)."
    echo -e "${MAGENTA}gst${RESET} - Show the current status of the Git repository."
    echo -e "${MAGENTA}gdst${RESET} - Show the current status of the Git repositories existing in current directory"
    echo -e "${MAGENTA}ga${RESET} - Add file to Git staging area. Usage: ga <file>"
    echo -e "${MAGENTA}gf${RESET} - Fetch updates from the remote Git repository (git fetch)."
    echo -e "${MAGENTA}gb${RESET} - Show the list of Git branches."
    echo -e "${MAGENTA}gc${RESET} - Commit staged changes with a message. Usage: ${YELLOW}gc '<commit_message>'${RESET}"
    echo -e "${MAGENTA}gcl${RESET} - Clone a Git repository. Usage: ${YELLOW}gcl <repository_url>${RESET}"
    echo -e "${MAGENTA}gi${RESET} - Initialize a new Git repository."
    echo -e "${MAGENTA}gl${RESET} - Show the Git log."
    echo -e "${MAGENTA}gls${RESET} - Show a graph of the Git log with oneline and decorations."
    echo -e "${MAGENTA}glpd${RESET} - Show the Git log with detailed commit information and patch diff."
    echo -e "${MAGENTA}glps${RESET} - Show the Git log with stats and details."
    echo -e "${MAGENTA}glp${RESET} - Show the Git log with formatted output and human-readable date."
    echo -e "${MAGENTA}gstr${RESET} - Show a simplified graph of the Git log, displaying only decorated commits."
    echo -e "${MAGENTA}gp${RESET} - Push changes to a remote Git repository. Usage: ${YELLOW}gp <branch_name>${RESET}"
    echo -e "${MAGENTA}gu${RESET} - Pull updates from the remote Git repository (git pull)."
    echo -e "${MAGENTA}gs${RESET} - Switch Git branches. Usage: ${YELLOW}gs <branch_name>${RESET}"
}

show_kubernetes_commands() {
    echo -e "${ORANGE}List of Kubernetes aliases and functions:${RESET}"
    echo -e "${MAGENTA}k${RESET} - Kubernetes alias for kubectl."
    echo -e "${MAGENTA}ks${RESET} - Kubernetes alias for kubectl with the kube-system namespace."

    echo -e "\n${BLUE}## Cluster Commands:${RESET}"
    echo -e "${MAGENTA}kci${RESET} - Display cluster information."
    echo -e "${MAGENTA}kgnw${RESET} - Get the list of nodes with wide output (shows additional information)."

    echo -e "\n${BLUE}## Create resources:${RESET}"
    echo -e "${MAGENTA}kcf${RESET} - Create a Kubernetes resource from a file. ${YELLOW}Usage: kcf <file.yaml>${RESET}"
    echo -e "${MAGENTA}kaf${RESET} - Apply a Kubernetes resource from a file. ${YELLOW}Usage: kaf <file.yaml>${RESET}"

    echo -e "\n${BLUE}## Get resources:${RESET}"
    echo -e "${MAGENTA}kgn${RESET} - Get the list of nodes in the Kubernetes cluster."
    echo -e "${MAGENTA}kgp${RESET} - Get the list of pods in the Kubernetes cluster."
    echo -e "${MAGENTA}kgpa${RESET} - Get the list of pods in all namespaces in the Kubernetes cluster."
    echo -e "${MAGENTA}kgs${RESET} - Get the list of services in the Kubernetes cluster."
    echo -e "${MAGENTA}kgd${RESET} - Get the list of deployments in the Kubernetes cluster."
    echo -e "${MAGENTA}kgns${RESET} - Get the list of namespaces in the Kubernetes cluster."

    echo -e "\n${BLUE}## Delete:${RESET}"
    echo -e "${MAGENTA}kd${RESET} - Delete a Kubernetes resource. Usage: ${YELLOW}kd <resource_type> <resource_name>${RESET}"
    echo -e "${MAGENTA}kdp${RESET} - Delete a Kubernetes pod. Usage: ${YELLOW}kdp <pod_name>${RESET}"
    echo -e "${MAGENTA}kds${RESET} - Delete a Kubernetes service. Usage: ${YELLOW}kds <service_name>${RESET}"
    echo -e "${MAGENTA}kdd${RESET} - Delete a Kubernetes deployment. Usage: ${YELLOW}kdd <deployment_name>${RESET}"
    echo -e "${MAGENTA}kdn${RESET} - Delete a Kubernetes namespace. Usage: ${YELLOW}kdn <namespace_name>${RESET}"

    echo -e "\n${BLUE}## Documentation & Logs:${RESET}"
    echo -e "${MAGENTA}kexp${RESET} - Show documentation for a Kubernetes resource type or existing resource. Usage: ${YELLOW}kexp <resource>${RESET}"
    echo -e "${MAGENTA}kdesc${RESET} - Describe Kubernetes resources. Usage: ${YELLOW}kdesc <resource_type> <resource_name>${RESET}"
    echo -e "${MAGENTA}kl${RESET} - Show logs for a pod. Usage: ${YELLOW}kl <pod_name>${RESET}"

    echo -e "\n${BLUE}## Others:${RESET}"
    echo -e "${MAGENTA}ked${RESET} - Edit a Kubernetes resource. Usage: ${YELLOW}ked <resource_type>/<resource_name>${RESET}"
    echo -e "${MAGENTA}ke${RESET} - Execute a command inside a running pod. Usage: ${YELLOW}ke <pod_name> -- <command>${RESET}"
    echo -e "${MAGENTA}ksetns${RESET} - Jump to namespace for kubectl context. Usage: ${YELLOW}ksetns <namespace>${RESET}"
}

show_utility_commands() {
    echo -e "${ORANGE}List of Terminal Utility alias and functions:${RESET}"
    echo -e "${MAGENTA}ll${RESET} - Long list."
    echo -e "${MAGENTA}v${RESET} - vim"
    echo -e "${MAGENTA}aqui${RESET} - Open the current directory in Windows Explorer (WSL Only)."
    echo -e "${MAGENTA}fmedia${RESET} - Move all .mkv and .mp4 files to the current directory."
    echo -e "${MAGENTA}cdd${RESET} - Change directory to Windows Desktop on WSL (WSL Only)."
    echo -e "${MAGENTA}explain${RESET} - Explains the given command or enters interactive mode to explain commands."
    echo -e "${MAGENTA}tldr${RESET} - Explains the given command and provides examples."
    echo -e "${MAGENTA}code${RESET} - Launch Visual Studio Code from the command line (can open files directly too)"
    echo -e "${MAGENTA}data${RESET} - Print the current date and time."
    echo -e "${MAGENTA}tempolx${RESET} - Get the weather in Lisboa."
    echo -e "${MAGENTA}temposx${RESET} - Get the weather in Seixal."
    echo -e "${MAGENTA}tempolxf${RESET} - Get the full weather info in Lisboa."
    echo -e "${MAGENTA}temposxf${RESET} - Get the full weather info in Seixal."
    echo -e "${MAGENTA}tempo${RESET} - Get the weather in a specified city. Usage: ${YELLOW}tempo <city>${RESET}"
    echo -e "${MAGENTA}tempof${RESET} - Get the full weather info in a specified city. Usage: ${YELLOW}tempof <city>${RESET}"
    echo -e "${MAGENTA}dus${RESET} - Show disk usage of files and directories."
    echo -e "${MAGENTA}net${RESET} - Show network interfaces and their status."
    echo -e "${MAGENTA}ippub${RESET} - Show Public IP."
    echo -e "${MAGENTA}ippubf${RESET} - Show information on ISP and Public IP"
    echo -e "${MAGENTA}field${RESET} - Extract specific fields from a line. Usage: ${YELLOW}field <column_number> <delimiter>${RESET}"
    echo -e "${MAGENTA}epoch${RESET} - Convert epoch to human-readable date. Usage: ${YELLOW}epoch <epoch_time>${RESET}"
    echo -e "${MAGENTA}lintsh${RESET} - Lint shell scripts using ShellCheck. Usage: ${YELLOW}lintsh <file.sh>${RESET}"
    echo -e "${MAGENTA}fmtsh${RESET} - Format shell scripts using shfmt. Usage: ${YELLOW}fmtsh <file.sh>${RESET}"
    echo -e "${MAGENTA}rb${RESET} - Reload \$HOME/.bashrc"
    echo -e "${MAGENTA}eb${RESET} - Open \$HOME/.bashrc in vim"
    echo -e "${MAGENTA}ebt${RESET} - Open \$HOME/.bash_tools in vim"
    echo -e "${MAGENTA}evrc${RESET} - Open \$HOME/.vimrc in vim"
    echo -e "${MAGENTA}wdir${RESET} - Change directory to \$HOME/work"
    echo -e "${MAGENTA}gdir${RESET} - Change directory to \$HOME/git"
    echo -e "${MAGENTA}ldir${RESET} - Change directory to \$HOME/lab"
    echo -e "${MAGENTA}ddir${RESET} - Change directory to \$HOME/dotfiles"
    echo -e "${MAGENTA}dsk${RESET} - Change directory to a specified directory in /mnt. Usage: ${YELLOW}dsk <drive>${RESET}"
    echo -e "${MAGENTA}vimfo${RESET} - Show custom vim keymaps and cheatsheet"
    echo -e "${MAGENTA}tmuxfo${RESET} - Show custom tmux keymaps and cheatsheet"
    echo -e "${MAGENTA}vscfoo${RESET} - Show Visual Studio Code keymaps and cheatsheet"
    echo -e "${MAGENTA}svim${RESET} - Edit files with sudo. Equal to 'sudoedit' and 'sudo -e'"
    echo -e "${MAGENTA}colors${RESET} - Print all 256 colors in the terminal."
}

show_media_commands() {
    echo -e "${ORANGE}List of Media Download functions:${RESET}"
    echo -e "${BLUE}## Youtube (Download audio and/or video):${RESET}"
    echo -e "${MAGENTA}getyt${RESET} - Download audio from a YouTube video and save it in desktop as MP3. Usage: ${YELLOW}getyt <url>${RESET}"
    echo -e "${MAGENTA}getytmp4${RESET} - Download audio from a YouTube video and save it in desktop as MP4 1080p. Usage: ${YELLOW}getytmp4 <url>${RESET}"
    echo -e "${MAGENTA}getytplist${RESET} - Download audio from all videos and save it in desktop in a YouTube playlist. Usage: ${YELLOW}getytplist <url>${RESET}"
    echo -e "${MAGENTA}getytplistmp4${RESET} - Download all videos and save it in desktop in a YouTube playlist in MP4 format. Usage: ${YELLOW}getytplistmp4 <url>${RESET}"
    echo -e "${MAGENTA}getytplistmp4subs${RESET} - Download all videos and save it in desktop in a YouTube playlist in MP4 format with subtitles. Usage: ${YELLOW}getytplistmp4subs <url>${RESET}"
    echo -e "${MAGENTA}getytmp4subs${RESET} - Download a YouTube video and save it in desktop in MP4 format (1080p) with subtitles. Usage: ${YELLOW}getytmp4subs <url>${RESET}"
    echo -e "\n${BLUE}## Spotify (Download audio):${RESET}"
    echo -e "${MAGENTA}getspot${RESET} - Download a song from Spotify and save it in desktop. Usage: ${YELLOW}getspot <url>${RESET}"
    echo -e "${MAGENTA}getalb${RESET} - Download an album from Spotify and save it in desktop. Usage: ${YELLOW}getalb <url>${RESET}"
}

show_starship_commands() {
    echo -e "${ORANGE}List of Customization functions:${RESET}"
    echo -e "${MAGENTA}pcolor${RESET} - Change theme of Prompt 0-29. Usage: ${YELLOW}pcolor <theme-name>${RESET}"
    echo -e "${MAGENTA}starship explain${RESET} - Explain current Starship prompt configuration."

}
    


show_help() {
    echo -e "${YELLOW}Available sections:${RESET}"
    echo "- git            (Git commands)"
    echo "- kubernetes     (or k8s - Kubernetes commands)"
    echo "- utils          (or utilities, terminal - Terminal utilities)"
    echo "- youtube        (or yt, spotify, media - Media download commands)"
    echo "- starship       (or theme, skin - Starship prompt customization)"
    echo "- all            (Show all commands)"
}

# Main lscom function
lscom() {
    local section="${1:-all}"

    case "$section" in
    "git")
        show_git_commands
        ;;
    "k8s" | "kubernetes")
        show_kubernetes_commands
        ;;
    "utils" | "utilities" | "terminal" | "utility" | "cli")
        show_utility_commands
        ;;
    "youtube" | "yt" | "spotify" | "media")
        show_media_commands
        ;;
    "starship" | "Starship" | "prompt" | "ps1" | "custom" | "customization" | "misc" | "theme" | "skin")
        show_starship_commands
        ;;
    "all" | "")
        show_git_commands
        echo
        show_kubernetes_commands
        echo
        show_utility_commands
        echo
        show_media_commands
        echo
        show_starship_commands
        ;;
    *)
        show_help
        ;;
    esac
}

# Load external files
. ~/.bash_aliases 2>/dev/null || true
. ~/.bashrc.local 2>/dev/null || true

# load completion
. /etc/bash/bash_completion 2>/dev/null ||
    . ~/.bash_completion 2>/dev/null

true
