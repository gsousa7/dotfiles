export EDITOR='vim'
export GREP_COLOR='1;36'
export GREP_COLORS='mt=1;36'
export GREP_OPTIONS='--color=auto'
export PAGER='less'
export TZ='Europe/Lisbon'
DESKTOPWINSL='/mnt/c/Users/GonÃ§alo Sousa/'

#Color Man pages
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

MAGENTA="\e[35m"
YELLOW="\e[33m"
BLUE="\e[34m"
GREEN="\e[32m"
RESET="\e[0m"
ORANGE="\e[38;5;214m"

# Custom Alias
alias ll='ls -la'
alias aqui='explorer.exe .'
alias fmedia='find . -type f \( -name "*.mp4" -o -name "*.mkv" \) -exec mv {} . \;'
alias cdd='cd "${DESKTOPWINSL}Desktop"'
alias data='echo $(date "+%d/%m/%Y %H:%M:%S")'
alias tempolx='curl wttr.in/Lisboa\?format=4'
alias temposx='curl wttr.in/Seixal\?format=4'
alias tempolxf='curl wttr.in/Lisboa'
alias temposxf='curl wttr.in/Seixal'
alias code='"${DESKTOPWINSL}AppData/Local/Programs/Microsoft VS Code/Code.exe"'
alias dus='du -sh * 2>/dev/null'
alias net='ip -br -c a'
alias rb="source $HOME/.bashrc"
alias eb="vim $HOME/.bashrc"
alias ebt="vim $HOME/.bash_tools"
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'


# Git Aliases
alias nb='git checkout -b'
alias gall='git add -A'
alias gst='git status'
alias ga='git add'
alias gf='git fetch'
alias gb='git branch'
alias gc='git commit -m'
alias gcl='git clone'
alias gi='git init'
alias gl='git log'
alias gls='git log --graph --oneline --decorate --all'
alias glpd='git log --graph --oneline --decorate --all -p --pretty=format:"%C(auto)%h %C(cyan)%an <%ae> %C(yellow)%ad %C(reset)%s %C(auto)%d %C(reset)"'
alias glps='git log --graph --oneline --decorate --all --stat --pretty=format:"%C(auto)%h %C(cyan)%an <%ae> %C(yellow)%ad %C(reset)%s %C(auto)%d %C(reset)"'
alias glp='git log --graph --oneline --decorate --all --pretty=format:"%C(auto)%h %C(cyan)%an <%ae> %C(yellow)%ad %C(reset)%s %C(auto)%d %C(reset)" --date=format:"%d/%m/%Y %H:%M:%S"'
alias gstr='git log --oneline --simplify-by-decoration --graph --all'
alias gp='git push origin'
alias gst='git status'
alias gu='git pull' # gu = git update
alias gs='git switch'

# Kubernetes Alias
alias k='kubectl'
alias ks='kubectl -n kube-system'
alias kdesc='kubectl describe'

## Create resources
alias kcf='kubectl create -f'
alias kaf='kubectl apply -f'

## Get resources
alias kgn='kubectl get nodes'
alias kgp='kubectl get pods'
alias kgpa='kubectl get pods --all-namespaces'
alias kgs='kubectl get services'
alias kgd='kubectl get deployments'

## Delete
alias kd='kubectl delete'
alias kdp='kubectl delete pod'
alias kds='kubectl delete services'
alias kdd='kubectl delete deployments'
alias kdn='kubectl delete namespaces'

# Custom functions
field() {
    awk -F "${2:- }" "{ print \$${1:-1} }"
}

tempo() {
    curl -s "wttr.in/${1}?format=4"
}

tempof() {
    curl -s "wttr.in/${1}"
}

## lazygit "Commit msg" "branch"
function lazygit() {
	if [ -z "$1" ]; then
		echo "Error: Commit message is required."
		echo "Usage: lazygit '<commit_message>' <branch_name>"
		return 1
	fi

	if [ -z "$2" ]; then
		echo "Error: Branch name is required"
		echo "Usage: lazygit '<commit_message>' <branch_name>"
		return 1
	fi

	git add -A
	git commit -m "$1"
	git push -u origin "$2"
}

## explain.sh begins
explain () {
  if [ "$#" -eq 0 ]; then
    while read  -p "Command: " cmd; do
      curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
    done
    echo "Bye!"
  elif [ "$#" -eq 1 ]; then
    curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
  else
    echo "Usage"
    echo "explain                  interactive mode."
    echo "explain 'cmd -o | ...'   one quoted command to explain it."
  fi
}

## Convert epoch to human readable (print current date if no args)
epoch() {
	local num=${1:--1}
	printf '%(%B %d, %Y %-I:%M:%S %p %Z)T\n' "$num"
}

# Get mp3 file of youtube
function getyt() {
    yt-dlp --extract-audio --audio-format mp3 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube
function getytmp4() {
    yt-dlp -f 'bestvideo[height=1080]+bestaudio/best[height=1080]' --merge-output-format mp4 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp3 file of youtube playlist
function getytplist() {
    yt-dlp -x --audio-format mp3 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube playlist
function getytplistmp4() {
    yt-dlp -f 'bestvideo+bestaudio' --merge-output-format mp4 --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube with subs
function getytmp4subs() {
    yt-dlp -f 'bestvideo[height=1080]+bestaudio/best[height=1080]' --merge-output-format mp4 --write-subs --embed-subs --sub-lang en --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get mp4 file of youtube playlist with subs
function getytplistmp4subs() {
    yt-dlp -f 'bestvideo+bestaudio' --merge-output-format mp4 --write-subs --embed-subs --sub-lang en --output "${DESKTOPWINSL}Desktop/%(title)s.%(ext)s" "$1"
}

## Get Spotify track
function getspot() {
    spotdl --output "${DESKTOPWINSL}Desktop/{artist} - {title}.mp3" "$1"
}

## Get Spotify album
function getalb() {
    spotdl --output "${DESKTOPWINSL}Desktop/{artist} - {album}/{artist} - {title}.mp3" "$1"
}

# get vim help
vimfo() {
    echo -e "${BLUE}Quick Vim Commands Reference${RESET}\n"
    
    # Basic Commands
    echo -e "${ORANGE}Basic Commands:${RESET} (No need for 'Esc :')"
    echo -e "${MAGENTA}\\q${RESET}  - Quit"
    echo -e "${MAGENTA}\\w${RESET}  - Save"
    echo -e "${MAGENTA}\\x${RESET}  - Save and quit"
    echo -e "${MAGENTA}\\/${RESET}  - Clear highlights\n"

    # Split Management
    echo -e "${ORANGE}Split Commands:${RESET}"
    echo -e "${YELLOW}Required 'Esc :' commands:${RESET}"
    echo -e "${MAGENTA}:sp${RESET}   - Create horizontal split (same file)"
    echo -e "${MAGENTA}:new${RESET}  - Create horizontal split (new file)"
    echo -e "${MAGENTA}:vsp${RESET}  - Create vertical split (same file)"
    echo -e "${MAGENTA}:vnew${RESET} - Create vertical split (new file)\n"

    echo -e "${YELLOW}Split Control:${RESET}"
    echo -e "${MAGENTA}Ctrl w c${RESET} - Close current split"
    echo -e "${MAGENTA}Ctrl w o${RESET} - Close all splits except current\n"

    # Navigation
    echo -e "${ORANGE}Split Navigation:${RESET}"
    echo -e "${MAGENTA}Ctrl h${RESET} - Move to left split"
    echo -e "${MAGENTA}Ctrl j${RESET} - Move to down split"
    echo -e "${MAGENTA}Ctrl k${RESET} - Move to up split"
    echo -e "${MAGENTA}Ctrl l${RESET} - Move to right split\n"

    # Resizing
    echo -e "${ORANGE}Split Resizing:${RESET}"
    echo -e "${MAGENTA}Ctrl w +${RESET} - Increase height"
    echo -e "${MAGENTA}Ctrl w -${RESET} - Decrease height"
    echo -e "${MAGENTA}Ctrl w >${RESET} - Increase width"
    echo -e "${MAGENTA}Ctrl w <${RESET} - Decrease width"
    echo -e "${MAGENTA}Ctrl w =${RESET} - Equalize split sizes\n"

    # Launch Commands
    echo -e "${ORANGE}Launch with Splits:${RESET}"
    echo -e "${MAGENTA}vim -O file1.txt file2.txt${RESET} - Open with vertical split"
    echo -e "${MAGENTA}vim -o file1.txt file2.txt${RESET} - Open with horizontal split"
}

show_git_commands() {
    echo -e "${BLUE}List of Git aliases and functions:${RESET}"
    echo -e "\n${ORANGE}# Git:${RESET}"
	echo -e "${MAGENTA}lazygit${RESET} - Commit and push changes to a specified branch. Usage: ${YELLOW}lazygit '<commit_message>' <branch_name>${RESET}"
	echo -e "${MAGENTA}nb${RESET} - Create a new Git branch. Usage: nb ${YELLOW}<branch_name>${RESET}"
	echo -e "${MAGENTA}gall${RESET} - Add all changes to Git staging area (equal to git add -A)."
	echo -e "${MAGENTA}gst${RESET} - Show the current status of the Git repository."
	echo -e "${MAGENTA}ga${RESET} - Add file to Git staging area. Usage: ga <file>"
	echo -e "${MAGENTA}gf${RESET} - Fetch updates from the remote Git repository (git fetch)."
	echo -e "${MAGENTA}gb${RESET} - Show the list of Git branches."
	echo -e "${MAGENTA}gc${RESET} - Commit staged changes with a message. Usage: ${YELLOW}gc '<commit_message>'${RESET}"
	echo -e "${MAGENTA}gcl${RESET} - Clone a Git repository. Usage: ${YELLOW}gcl <repository_url>${RESET}"
	echo -e "${MAGENTA}gi${RESET} - Initialize a new Git repository."
	echo -e "${MAGENTA}gl${RESET} - Show the Git log."
	echo -e "${MAGENTA}gls${RESET} - Show a graph of the Git log with oneline and decorations."
	echo -e "${MAGENTA}glpd${RESET} - Show the Git log with detailed commit information and patch diff."
	echo -e "${MAGENTA}glps${RESET} - Show the Git log with stats and details."
	echo -e "${MAGENTA}glp${RESET} - Show the Git log with formatted output and human-readable date."
	echo -e "${MAGENTA}gstr${RESET} - Show a simplified graph of the Git log, displaying only decorated commits."
	echo -e "${MAGENTA}gp${RESET} - Push changes to a remote Git repository. Usage: ${YELLOW}gp <branch_name>${RESET}"
	echo -e "${MAGENTA}gu${RESET} - Pull updates from the remote Git repository (git pull)."
	echo -e "${MAGENTA}gs${RESET} - Switch Git branches. Usage: ${YELLOW}gs <branch_name>${RESET}"
}

show_kubernetes_commands() {
    echo -e "${BLUE}List of Kubernetes aliases and functions:${RESET}"
	echo -e "\n${ORANGE}# Kubernetes Alias:${RESET}"
	echo -e "${MAGENTA}k${RESET} - Kubernetes alias for kubectl."
	echo -e "${MAGENTA}ks${RESET} - Kubernetes alias for kubectl with the kube-system namespace."

	echo -e "\n${ORANGE}## Create resources:${RESET}"
	echo -e "${MAGENTA}kdesc${RESET} - Describe Kubernetes resources. Usage: ${YELLOW}kdesc <resource_type> <resource_name>${RESET}"
	echo -e "${MAGENTA}kcf${RESET} - Create a Kubernetes resource from a file. ${YELLOW}Usage: kcf <file.yaml>${RESET}"
	echo -e "${MAGENTA}kaf${RESET} - Apply a Kubernetes resource from a file. ${YELLOW}Usage: kaf <file.yaml>${RESET}"

	echo -e "\n${ORANGE}## Get resources:${RESET}"
	echo -e "${MAGENTA}kgn${RESET} - Get the list of nodes in the Kubernetes cluster."
	echo -e "${MAGENTA}kgp${RESET} - Get the list of pods in the Kubernetes cluster."
	echo -e "${MAGENTA}kgpa${RESET} - Get the list of pods in all namespaces in the Kubernetes cluster."
	echo -e "${MAGENTA}kgs${RESET} - Get the list of services in the Kubernetes cluster."
	echo -e "${MAGENTA}kgd${RESET} - Get the list of deployments in the Kubernetes cluster."

	echo -e "\n${ORANGE}## Delete:${RESET}"
	echo -e "${MAGENTA}kd${RESET} - Delete a Kubernetes resource. Usage: ${YELLOW}kd <resource_type> <resource_name>${RESET}"
	echo -e "${MAGENTA}kdp${RESET} - Delete a Kubernetes pod. Usage: ${YELLOW}kdp <pod_name>${RESET}"
	echo -e "${MAGENTA}kds${RESET} - Delete a Kubernetes service. Usage: ${YELLOW}kds <service_name>${RESET}"
	echo -e "${MAGENTA}kdd${RESET} - Delete a Kubernetes deployment. Usage: ${YELLOW}kdd <deployment_name>${RESET}"
	echo -e "${MAGENTA}kdn${RESET} - Delete a Kubernetes namespace. Usage: ${YELLOW}kdn <namespace_name>${RESET}"
}

show_utility_commands() {
    echo -e "${BLUE}List of Terminal Utility functions:${RESET}"
	echo -e "${MAGENTA}ll${RESET} - Long list."
	echo -e "${MAGENTA}aqui${RESET} - Open the current directory in Windows Explorer (WSL Only)."
	echo -e "${MAGENTA}fmedia${RESET} - Move all .mkv and .mp4 files to the current directory."
	echo -e "${MAGENTA}cdd${RESET} - Change directory to Windows Desktop on WSL (WSL Only)."
	echo -e "${MAGENTA}explain${RESET} - Explains the given command or enters interactive mode to explain commands."
	echo -e "${MAGENTA}tldr${RESET} - Explains the given command and provides examples."
	echo -e "${MAGENTA}code${RESET} - Launch Visual Studio Code from the command line."
	echo -e "${MAGENTA}data${RESET} - Print the current date and time."
	echo -e "${MAGENTA}tempolx${RESET} - Get the weather in Lisboa."
	echo -e "${MAGENTA}temposx${RESET} - Get the weather in Seixal."
	echo -e "${MAGENTA}tempolxf${RESET} - Get the full weather info in Lisboa."
	echo -e "${MAGENTA}temposxf${RESET} - Get the full weather info in Seixal."
	echo -e "${MAGENTA}tempo${RESET} - Get the weather in a specified city. Usage: ${YELLOW}tempo <city>${RESET}"
	echo -e "${MAGENTA}tempof${RESET} - Get the full weather info in a specified city. Usage: ${YELLOW}tempof <city>${RESET}"
	echo -e "${MAGENTA}dus${RESET} - Show disk usage of files and directories."
	echo -e "${MAGENTA}net${RESET} - Show network interfaces and their status."
	echo -e "${MAGENTA}field${RESET} - Extract specific fields from a line. Usage: ${YELLOW}field <column_number> <delimiter>${RESET}"
	echo -e "${MAGENTA}epoch${RESET} - Convert epoch to human-readable date. Usage: ${YELLOW}epoch <epoch_time>${RESET}"
	echo -e "${MAGENTA}rb{RESET} - Reload \$HOME/.bashrc"
	echo -e "${MAGENTA}eb{RESET} - Open \$HOME/.bashrc in vim"
	echo -e "${MAGENTA}ebt{RESET} - Open \$HOME/.bash_tools in vim"
}

show_media_commands() {
    echo -e "${BLUE}List of Media Download functions:${RESET}"
    echo -e "\n${ORANGE}# YouTube (Download audio and video):${RESET}"
	echo -e "${MAGENTA}getyt${RESET} - Download audio from a YouTube video and save it in desktop as MP3. Usage: ${YELLOW}getyt <url>${RESET}"
	echo -e "${MAGENTA}getytmp4${RESET} - Download audio from a YouTube video and save it in desktop as MP4 1080p. Usage: ${YELLOW}getytmp4 <url>${RESET}"
	echo -e "${MAGENTA}getytplist${RESET} - Download audio from all videos and save it in desktop in a YouTube playlist. Usage: ${YELLOW}getytplist <url>${RESET}"
	echo -e "${MAGENTA}getytplistmp4${RESET} - Download all videos and save it in desktop in a YouTube playlist in MP4 format. Usage: ${YELLOW}getytplistmp4 <url>${RESET}"
	echo -e "${MAGENTA}getytplistmp4subs${RESET} - Download all videos and save it in desktop in a YouTube playlist in MP4 format with subtitles. Usage: ${YELLOW}getytplistmp4subs <url>${RESET}"
	echo -e "${MAGENTA}getytmp4subs${RESET} - Download a YouTube video and save it in desktop in MP4 format (1080p) with subtitles. Usage: ${YELLOW}getytmp4subs <url>${RESET}"
	echo -e "\n${ORANGE}# Spotify (Download audio):${RESET}"
	echo -e "${MAGENTA}getspot${RESET} - Download a song from Spotify and save it in desktop. Usage: ${YELLOW}getspot <url>${RESET}"
	echo -e "${MAGENTA}getalb${RESET} - Download an album from Spotify and save it in desktop. Usage: ${YELLOW}getalb <url>${RESET}"
}

show_custom_commands() {
    echo -e "${BLUE}List of Customization functions:${RESET}"
    echo -e "\n${ORANGE}# Customization & Misc:${RESET}"
    echo -e "${MAGENTA}set_prompt_colors${RESET} - Change theme of Terminal/Prompt 0-29. Usage: ${YELLOW}set_prompt_colors <number 0-29>${RESET}"
	echo -e "${MAGENTA}colors${RESET} - Print all 256 colors in the terminal."
}

show_help() {
    echo -e "${YELLOW}Available sections:${RESET}"
    echo "- git            (Git commands)"
    echo "- kubernetes     (or k8s - Kubernetes commands)"
    echo "- utils          (or utilities, terminal - Terminal utilities)"
    echo "- youtube        (or yt, spotify, media - Media download commands)"
    echo "- custom         (or customization, misc - Customization commands)"
    echo "- all            (Show all commands)"
}

# Main lscom function
lscom() {
    local section="${1:-all}"
    
    case "$section" in
        "git"|"Git")
            show_git_commands
            ;;
        "k8s"|"kubernetes"|"Kubernetes")
            show_kubernetes_commands
            ;;
        "utils"|"utilities"|"terminal")
            show_utility_commands
            ;;
        "youtube"|"yt"|"spotify"|"media")
            show_media_commands
            ;;
        "custom"|"customization"|"misc"|"theme"|"skin")
            show_custom_commands
            ;;
        "all"|"")
            echo -e "${BLUE}Complete list of aliases and functions:${RESET}"
            show_git_commands
            echo
            show_kubernetes_commands
            echo
            show_utility_commands
            echo
            show_media_commands
            echo
            show_custom_commands
            ;;
        *)
            show_help
            ;;
    esac
}

# Prompt
# Store `tput` colors for future use to reduce fork+exec
# the array will be 0-255 for colors, 256 will be sgr0
# and 257 will be bold

# Store `tput` colors for future use to reduce fork+exec
COLOR256=()
COLOR256[0]=$(tput setaf 1)       # Red for errors
COLOR256[256]=$(tput sgr0)        # Reset
COLOR256[257]=$(tput bold)        # Bold text
COLOR256[500]=$(tput setaf 83)    # Custom color for #50FA7B (approximate)

# Colors for use in PS1 that may or may not change when set_prompt_colors is run
PROMPT_COLORS=()

# Change the prompt colors to a theme, themes are 0-29
set_prompt_colors() {
    local h=${1:-0}
    local color=
    local i=0
    local j=0
    for i in {22..231}; do
        ((i % 30 == h)) || continue

        color=${COLOR256[$i]}
        # cache the tput colors
        if [[ -z $color ]]; then
            COLOR256[$i]=$(tput setaf "$i")
            color=${COLOR256[$i]}
        fi
        PROMPT_COLORS[$j]=$color
        ((j++))
    done
}

# Construct the prompt
PS1='$(ret=$?;(($ret!=0)) && echo "\[${COLOR256[0]}\]($ret) \[${COLOR256[256]}\]")'

# username
PS1+='\[${COLOR256[500]}\]\u\[${COLOR256[256]}\] - '

# hostname
PS1+='\[${COLOR256[500]}\]\h '

# cwd
PS1+='\[${PROMPT_COLORS[5]}\]\w '

# optional git branch
PS1+='$(branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); [[ -n $branch ]] && echo "\[${PROMPT_COLORS[2]}\](\[${PROMPT_COLORS[3]}\]git:$branch\[${PROMPT_COLORS[2]}\]) ")'

# prompt character
PS1+='\[${PROMPT_COLORS[0]}\]\$\[${COLOR256[256]}\] '

# set the theme
set_prompt_colors 24

# Prompt command
_prompt_command() {
    local user=$USER
    local host=${HOSTNAME%%.*}
    local pwd=${PWD/#$HOME/\~}
    local ssh=
    [[ -n $SSH_CLIENT ]] && ssh='[ssh] '
    printf "\033]0;%s%s@%s:%s\007" "$ssh" "$user" "$host" "$pwd"
}
PROMPT_COMMAND=_prompt_command

PROMPT_DIRTRIM=6

# Print all 256 colors
colors() {
    local i
    for i in {0..255}; do
        printf "\x1b[38;5;${i}mcolor %d\n" "$i"
    done
    tput sgr0
}

# Load external files
. ~/.bash_aliases    2>/dev/null || true
. ~/.bashrc.local    2>/dev/null || true

# load completion
. /etc/bash/bash_completion 2>/dev/null ||
	. ~/.bash_completion 2>/dev/null


true
